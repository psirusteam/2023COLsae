# D칤a 4 - Sesi칩n 1- Modelo de 치rea para estad칤sticas del mercado de trabajo

```{r setup, include=FALSE, message=FALSE, error=FALSE, warning=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  cache = TRUE)
library(printr)
library(kableExtra)
library(tidyverse)
tba <- function(dat, cap = NA){
  kable(dat,
      format = "html", digits =  4,
      caption = cap) %>% 
     kable_styling(bootstrap_options = "striped", full_width = F)%>%
         kable_classic(full_width = F, html_font = "Arial Narrow")
}

```

La Gran Encuesta Integrada de Hogares (GEIH) es una encuesta realizada por el Departamento Administrativo Nacional de Estad칤stica (DANE) en Colombia. Esta encuesta tiene como objetivo principal recopilar informaci칩n sobre la situaci칩n econ칩mica y social de los hogares colombianos, incluyendo aspectos relacionados con el empleo, la educaci칩n, la salud, la vivienda, la pobreza y la desigualdad.

La GEIH se realiza de forma continua durante todo el a침o, y cuenta con una muestra representativa de hogares seleccionados de manera aleatoria en todo el territorio colombiano. La muestra est치 dise침ada para representar la diversidad socioecon칩mica y geogr치fica del pa칤s, y se estratifica por regiones, zonas urbanas y rurales, y tama침o de la poblaci칩n.

La encuesta se realiza a trav칠s de entrevistas personales en los hogares seleccionados, y se recopila informaci칩n sobre las caracter칤sticas de los miembros del hogar, su situaci칩n laboral, ingresos, educaci칩n, salud, entre otros aspectos. La GEIH es considerada una fuente confiable de informaci칩n estad칤stica sobre la situaci칩n socioecon칩mica del pa칤s, y se utiliza para la elaboraci칩n de pol칤ticas p칰blicas y la toma de decisiones en diferentes 치reas.

## Definici칩n del modelo multinomial

-   Sea $K$ el n칰mero de categor칤as de la variable de inter칠s $洧녧\sim multinimial\left(\boldsymbol{\theta}\right)$, con $\boldsymbol{\theta}=\left(p_{1},p_{2},\dots ,p_{k}\right)$ y $\sum_{k=1}^{K}p_{k}=1$.

-   Sea $N_i$ el n칰mero de elementos en el i-칠siamo dominio y $N_{ik}$ el n칰mero de elementos que tienen la k-칠sima categor칤a, note que $\sum_{k=1}^{K}N_{ik}=N_{i}$ y $p_{ik}=\frac{N_{ik}}{N_{i}}$.

-   Sea $\hat{p}_{ik}$ la estimaci칩n directa de $p_{ik}$ y $v_{ik}=Var\left(\hat{p}_{ik}\right)$ y denote el estimador de la varianza por $\hat{v}_{ik}=\widehat{Var}\left(\hat{p}_{ik}\right)$


Note que el efecto dise침o cambia entre categor칤a, por tanto, lo primero ser치 definir el tama침o de muestra efectivo por categor칤a. Esto es:

La estimaci칩n de $\tilde{n}$ esta dado por $\tilde{n}_{ik} = \frac{(\tilde{p}_{ik}\times(1-\tilde{p}_{ik}))}{\hat{v}_{ik}},$

$\tilde{y}_{ik}=\tilde{n}_{ik}\times\hat{p}_{ik}$

luego, $\hat{n}_{i} = \sum_{k=1}^{K}\tilde{y}_{ik}$

de donde se sigue que $\hat{y}_{ik} = \hat{n}_i\times \hat{p}_{ik}$


Sea $\boldsymbol{\theta}=\left(p_{1},p_{2}, p_{3}\right)^{T}=\left(\frac{N_{i1}}{N_{i}},\frac{N_{i2}}{N_{i}}\frac{N_{i3}}{N_{i}}\right)^{T}$, entonces el modelo multinomial para el i-칠simo dominio estar칤a dado por:

$$
\left(\tilde{y}_{i1},\tilde{y}_{i2},\tilde{y}_{i3}\right)\mid\hat{n}_{i},\boldsymbol{\theta}_{i}\sim multinomial\left(\hat{n}_{i},\boldsymbol{\theta}_{i}\right)
$$ 
Ahora, puede escribir $p_{ik}$ como :

$\ln\left(\frac{p_{i2}}{p_{i1}}\right)=\boldsymbol{X}_{i}^{T}\beta_{2} + u_{i2}$ y
$\ln\left(\frac{p_{i3}}{p_{i1}}\right)=\boldsymbol{X}_{i}^{T}\beta_{3}+ u_{i3}$



Dada la restricci칩n $1 = p_{i1} + p_{i2} + p_{i3}$ entonces 
$$p_{i1} + p_{i1}(e^{\boldsymbol{X}_{i}^{T}\boldsymbol{\beta_{2}}}+  u_{i2})+p_{i1}(e^{\boldsymbol{X}_{i}^{T}\boldsymbol{\beta}_{3}} + u_{i3})$$ de donde se sigue que 

$$
p_{i1}=\frac{1}{1+e^{\boldsymbol{X}_{i}^{T}\boldsymbol{\beta_{2}}}+ u_{i2}+e^{\boldsymbol{X_{i}}^{T}\boldsymbol{\beta_{2}}}+ u_{i3}}
$$

Las expresiones para $p_{i2}$ y $p_{i3}$ estar칤an dadas por: 

$$
p_{i2}=\frac{e^{\boldsymbol{X}_{i}^{T}\boldsymbol{\beta}_{2}} + u_{i2}}{1+e^{\boldsymbol{X}_{i}^{T}\boldsymbol{\beta_{2}}}+ u_{i2}+e^{\boldsymbol{X_{i}}^{T}\boldsymbol{\beta_{2}}}+ u_{i3}}
$$

$$
p_{i3}=\frac{e^{\boldsymbol{X}_{i}^{T}\boldsymbol{\beta}_{3}}+ u_{i3}}{1+e^{\boldsymbol{X}_{i}^{T}\boldsymbol{\beta_{2}}}+ u_{i2}+e^{\boldsymbol{X_{i}}^{T}\boldsymbol{\beta_{3}}}+ u_{i3}}
$$

## Lectura de librer칤as.

  -   La librer칤a `survey` es una herramienta de an치lisis estad칤stico en R que permite trabajar con datos de encuestas complejas, como las encuestas estratificadas, multiet치picas o con pesos de muestreo. Ofrece funciones para estimaci칩n de par치metros, dise침o de muestras, an치lisis de varianza y regresi칩n, y c치lculo de errores est치ndar.

  -   La librer칤a `tidyverse` es un conjunto de paquetes de R que se utilizan para la manipulaci칩n y visualizaci칩n de datos. Incluye las librer칤as `dplyr`, `ggplot2`, `tidyr` y otras, y se caracteriza por su enfoque en la programaci칩n `tidy` o ordenada, que facilita la exploraci칩n y an치lisis de datos.

  -   La librer칤a `srvyr` es una extensi칩n de la librer칤a `survey` que permite integrar las funciones de `survey` con la sintaxis de `dplyr`, lo que facilita la manipulaci칩n de datos de encuestas complejas. Incluye funciones para agrupar, filtrar y resumir datos de encuestas utilizando la sintaxis `tidy`.

  -   La librer칤a `TeachingSampling` es una herramienta de R que se utiliza para la ense침anza de m칠todos de muestreo estad칤stico. Incluye funciones para simular diferentes tipos de muestras, estimar par치metros, calcular errores est치ndar y construir intervalos de confianza, entre otras.

  -   La librer칤a `haven` es una herramienta de R que permite importar y exportar datos en diferentes formatos, incluyendo SPSS, Stata y SAS. Permite trabajar con archivos de datos de encuestas, y ofrece funciones para etiquetar variables, codificar datos faltantes y convertir datos de diferentes formatos.

  -   La librer칤a `bayesplot` es una herramienta de R que se utiliza para la visualizaci칩n y diagn칩stico de modelos Bayesianos. Incluye funciones para graficar distribuciones posteriores, diagn칩sticos de convergencia, gr치ficos de diagn칩stico de residuos, y otros tipos de gr치ficos relacionados con el an치lisis Bayesianos.

  -   La librer칤a `patchwork` es una herramienta de R que permite unir gr치ficos de manera sencilla y flexible. Esta librer칤a facilita la creaci칩n de gr치ficos complejos al permitir la combinaci칩n de m칰ltiples gr치ficos en una sola visualizaci칩n, lo que resulta especialmente 칰til en an치lisis de datos y modelizaci칩n.

  -   La librer칤a `stringr` es una herramienta de R que se utiliza para la manipulaci칩n de cadenas de texto. Incluye funciones para la extracci칩n, manipulaci칩n y modificaci칩n de cadenas de texto, lo que resulta especialmente 칰til en la limpieza y preparaci칩n de datos antes de su an치lisis.

  -   La librer칤a `rstan` es una herramienta de R que se utiliza para la estimaci칩n de modelos Bayesianos mediante el m칠todo de cadenas de Markov Monte Carlo (MCMC). Esta librer칤a permite la especificaci칩n y estimaci칩n de modelos complejos mediante un lenguaje sencillo y flexible, y ofrece diversas herramientas para el diagn칩stico y visualizaci칩n de resultados.

```{r}
library(survey)
library(tidyverse)
library(srvyr)
library(TeachingSampling)
library(haven)
library(bayesplot)
library(patchwork)
library(stringr)
library(rstan)
```

## Lectura de la encuesta y estimaciones directas 

En la primera l칤nea se carga la encuesta desde un archivo RDS y se guarda en un objeto llamado `encuesta`. La segunda l칤nea utiliza la funci칩n `transmute()` de la librer칤a `dplyr` para seleccionar las variables de inter칠s en la encuesta y crear nuevas variables a partir de ellas. Luego, se utiliza la variable `id_dominio` para identificar el dominio de estudio. En conjunto, estos pasos son fundamentales para preparar los datos de la encuesta para su posterior estimaci칩n del par치metro.


```{r, eval=TRUE}
encuesta <- readRDS('Data/encuestaCOL18N1.rds')
## 
encuesta <-
  encuesta %>%
  transmute(
    dam = dam_ee,
    dam2,
    fep = `_fep`, 
    upm = segmento,
    estrato = paste0(dam, haven::as_factor(area_ee,levels = "values")),
    empleo = condact3
  )
id_dominio <- "dam2"

```

El c칩digo presentado define el dise침o muestral para el an치lisis de la encuesta "encuesta" en R. La primera l칤nea establece una opci칩n para el tratamiento de las PSU (unidades primarias de muestreo) solitarias, lo que indica que se deben aplicar ajustes en el c치lculo de los errores est치ndar. La segunda l칤nea utiliza la funci칩n "as_survey_design" de la librer칤a "survey" para definir el dise침o muestral. La funci칩n toma como argumentos la variable "encuesta" y los siguientes par치metros:

  -   `strata`: la variable que define las estratas de muestreo en la encuesta, en este caso la variable "estrato".

  -   `ids`: la variable que identifica las PSU en la encuesta, en este caso la variable "upm".

  -   `weights`: la variable que indica los pesos muestrales de cada observaci칩n, en este caso la variable "fep".

  -   `nest`: un par치metro l칩gico que indica si los datos de la encuesta est치n anidados o no. En este caso, se establece en "TRUE" porque los datos est치n anidados por dominio.
  
En conjunto, estos pasos permiten definir un dise침o muestral que tenga en cuenta las caracter칤sticas del muestreo y los pesos asignados a cada observaci칩n en la encuesta, lo que es necesario para obtener estimaciones precisas y representativas de los par치metros de inter칠s.

```{r, eval=TRUE}
options(survey.lonely.psu= 'adjust' )
diseno <- encuesta %>%
  as_survey_design(
    strata = estrato,
    ids = upm,
    weights = fep,
    nest=T
  )

```

El c칩digo presentado es una operaci칩n que se realiza en el dise침o muestral definido en el c칩digo anterior, con el objetivo de obtener un indicador del empleo por dominio. La primera l칤nea define un objeto llamado "indicador_dam". En la segunda l칤nea, se agrupa el dise침o muestral seg칰n el dominio especificado en la variable "id_dominio". La tercera l칤nea filtra los datos para quedarse con los individuos que tienen empleo (empleo igual a 1), est치n desempleados (empleo igual a 2) o son inactivos (empleo igual a 3).

A partir de la cuarta l칤nea, se utilizan las funciones "summarise" y "survey_mean" para calcular las estad칤sticas descriptivas de inter칠s. En particular, se calculan el n칰mero de personas ocupadas, desocupadas e inactivas en cada dominio, y la proporci칩n de personas en cada una de estas categor칤as. La funci칩n "survey_mean" se utiliza para calcular la proporci칩n de personas en cada una de estas categor칤as con sus respectivos errores est치ndar y efecto de dise침o.

```{r, eval=FALSE}
indicador_dam <-
  diseno %>% group_by_at(id_dominio) %>% 
  filter(empleo %in% c(1:3)) %>%
  summarise(
    n_ocupado = unweighted(sum(empleo == 1)),
    n_desocupado = unweighted(sum(empleo == 2)),
    n_inactivo = unweighted(sum(empleo == 3)),
    Ocupado = survey_mean(empleo == 1,
      vartype = c("se",  "var"),
      deff = T
    ),
    Desocupado = survey_mean(empleo == 2,
                          vartype = c("se",  "var"),
                          deff = T
    ),
    Inactivo = survey_mean(empleo == 3,
                          vartype = c("se",  "var"),
                          deff = T
    )
  )

```

## Selecci칩n de dominios 

En la secci칩n anterior, se llev칩 a cabo una estimaci칩n directa para cada categor칤a individualmente en cada municipio (dominio) presente en la muestra. Ahora, para evaluar la calidad de los resultados obtenidos, realizaremos un an치lisis descriptivo. Se emplean varias medidas de calidad, entre ellas, se cuenta el n칰mero de dominios que tienen dos o m치s unidades primarias de muestreo (UPM), as칤 como el efecto de dise침o mayor a 1 y las varianzas mayores a 0. Estas medidas nos permitir치n determinar la fiabilidad de nuestros resultados y tomar decisiones informadas en funci칩n de ellos.

Despu칠s de realizar las validaciones anteriores se establece como regla incluir en el estudio los dominios que posean 

  - Dos o m치s upm por dominio. 
  
  - Contar con un resultado en el Deff

```{r, eval=FALSE}
indicador_dam1 <- indicador_dam %>% 
  filter(n_upm >= 2, !is.na(Desocupado_deff)) 
saveRDS(object = indicador_dam1, "Data/base_modelo.Rds")
```

```{r, echo=FALSE}
indicador_dam1 <- readRDS("Data/base_modelo.Rds")
tba(head(indicador_dam1,10))
```

## Modelo programando en `STAN`

El c칩digo presenta la implementaci칩n de un modelo multinomial log칤stico de 치rea de respuesta utilizando el lenguaje de programaci칩n `STAN`. En este modelo, se asume que la variable de respuesta en cada dominio sigue una distribuci칩n multinomial. Se asume que los par치metros que rigen la relaci칩n entre las variables predictoras y la variable de respuesta son diferentes en cada dominio y se modelan como efectos aleatorios.

La secci칩n de *functions* define una funci칩n auxiliar llamada `pred_theta()`, que se utiliza para predecir los valores de la variable de respuesta en los dominios no observados. La secci칩n de `data` contiene las variables de entrada del modelo, incluyendo el n칰mero de dominios, el n칰mero de categor칤as de la variable de respuesta, las estimaciones directas de la variable de respuesta en cada dominio, las covariables observadas en cada dominio y las covariables correspondientes a los dominios no observados.

La secci칩n de *parameters* define los par치metros desconocidos del modelo, incluyendo la matriz de par치metros *beta*, que contiene los coeficientes que relacionan las covariables con la variable de respuesta en cada categor칤a. Tambi칠n se incluyen los desviaciones est치ndar de los efectos aleatorios.

En la secci칩n de *transformed parameters* se define el vector de par치metros `theta`, que contiene las probabilidades de pertenencia a cada categor칤a de la variable de respuesta en cada dominio. Se utilizan los efectos aleatorios para ajustar los valores de `theta` en cada dominio.

En la secci칩n de *model* se define la estructura del modelo y se incluyen las distribuciones a priori para los par치metros desconocidos. En particular, se utiliza una distribuci칩n normal para los coeficientes de la matriz beta. Finalmente, se calcula la funci칩n de verosimilitud de la distribuci칩n multinomial para las estimaciones directas de la variable de respuesta en cada dominio.

La secci칩n de *generated quantities* se utiliza para calcular las predicciones de la variable de respuesta en los dominios no observados utilizando la funci칩n auxiliar definida previamente.

```{r, eval=FALSE}
functions {
  matrix pred_theta(matrix Xp, int p, matrix beta){
  int D1 = rows(Xp);
  real num1[D1, p];
  real den1[D1];
  matrix[D1,p] theta_p;
  
  for(d in 1:D1){
    num1[d, 1] = 1;
    num1[d, 2] = exp(Xp[d, ] * beta[1, ]' ) ;
    num1[d, 3] = exp(Xp[d, ] * beta[2, ]' ) ;
    
    den1[d] = sum(num1[d, ]);
  }
  
  for(d in 1:D1){
    for(i in 2:p){
    theta_p[d, i] = num1[d, i]/den1[d];
    }
    theta_p[d, 1] = 1/den1[d];
   }

  return theta_p  ;
  }
  
}

data {
  int<lower=1> D; // n칰mero de dominios 
  int<lower=1> P; // categor칤as
  int<lower=1> K; // cantidad de regresores
  int y_tilde[D, P]; // matriz de datos
  matrix[D, K] X_obs; // matriz de covariables
  int<lower=1> D1; // n칰mero de dominios 
  matrix[D1, K] X_pred; // matriz de covariables
}
  

parameters {
  matrix[P-1, K] beta;// matriz de par치metros 
  real<lower=0> sigma2_u1;       // random effects standard deviations
  real<lower=0> sigma2_u2;       // random effects standard deviations
  vector[D] u1;
  vector[D] u2;
  // declare L_u to be the Choleski factor of a 2x2 correlation matrix
          
}

transformed parameters {
  simplex[P] theta[D];// vector de par치metros;
  real num[D, P];
  real den[D];
  real<lower=0> sigma_u1;       // random effects standard deviations
  real<lower=0> sigma_u2;       // random effects standard deviations
  sigma_u1 = sqrt(sigma2_u1); 
  sigma_u2 = sqrt(sigma2_u2); 

  for(d in 1:D){
    num[d, 1] = 1;
    num[d, 2] = exp(X_obs[d, ] * beta[1, ]' + u1[d]) ;
    num[d, 3] = exp(X_obs[d, ] * beta[2, ]' + u2[d]) ;
    
    den[d] = sum(num[d, ]);
  }
  
  for(d in 1:D){
    for(p in 2:P){
    theta[d, p] = num[d, p]/den[d];
    }
    theta[d, 1] = 1/den[d];
  }
}

model {
 u1 ~ normal(0, sigma_u1);
 u2 ~ normal(0, sigma_u2);
 sigma2_u1 ~  inv_gamma(0.0001, 0.0001);
 sigma2_u2 ~  inv_gamma(0.0001, 0.0001);
  
  for(p in 2:P){
    for(k in 1:K){
      beta[p-1, k] ~ normal(0, 10000);
    }
    }
  
  for(d in 1:D){
    target += multinomial_lpmf(y_tilde[d, ] | theta[d, ]); 
  }
}

  
generated quantities {
  matrix[D1,P] theta_pred;
  theta_pred = pred_theta(X_pred, P, beta);
}

```

## Preparando insumos para `STAN`

  1.    Lectura y adecuaci칩n de covariables
  
```{r}
statelevel_predictors_df <-
  readRDS('Data/statelevel_predictors_df_dam2.rds') 
## Estandarizando las variables para controlar el efecto de la escala. 
statelevel_predictors_df %<>%
  mutate_at(vars("luces_nocturnas", 
                 "cubrimiento_cultivo",
                 "cubrimiento_urbano",
                 "modificacion_humana",
                 "accesibilidad_hospitales",
                 "accesibilidad_hosp_caminado"),
            function(x)as.numeric(scale(x)))
head(statelevel_predictors_df,10) %>% tba()
```
  
  2.    Seleccionar las variables del modelo y crear matriz de covariables.
  
```{r}
names_cov <-
  c(
    "dam2",
    "tasa_desocupacion",
    "hacinamiento",
    "piso_tierra",
    "luces_nocturnas",
    "cubrimiento_cultivo",
    "modificacion_humana"
  )
X_pred <-
  anti_join(statelevel_predictors_df %>% select(all_of(names_cov)),
            indicador_dam1 %>% select(dam2))
```

  En el bloque de c칩digo se identifican que dominios ser치n los predichos.  
```{r}
X_pred %>% select(dam2) %>% 
  saveRDS(file = "Data/dam_pred.rds")
```

  Creando la matriz de covariables para los dominios no observados (`X_pred`) y los observados (`X_obs`)
  
```{r, eval=FALSE}
## Obteniendo la matrix 
X_pred %<>%
  data.frame() %>%
  select(-dam2)  %>%  as.matrix()

## Identificando los dominios para realizar estimaci칩n del modelo

X_obs <- inner_join(indicador_dam1 %>% select(dam2, id_orden),
                    statelevel_predictors_df %>% select(all_of(names_cov))) %>%
  arrange(id_orden) %>%
  data.frame() %>%
  select(-dam2, -id_orden)  %>%  as.matrix()
```
  
  3. Calculando el n_efectivo y el $\tilde{y}$ 
  
```{r,eval=FALSE}
D <- nrow(indicador_dam1)
P <- 3 # Ocupado, desocupado, inactivo.
Y_tilde <- matrix(NA, D, P)
n_tilde <- matrix(NA, D, P)
Y_hat <- matrix(NA, D, P)

# n efectivos ocupado
n_tilde[,1] <- (indicador_dam1$Ocupado*(1 - indicador_dam1$Ocupado))/indicador_dam1$Ocupado_var
Y_tilde[,1] <- n_tilde[,1]* indicador_dam1$Ocupado


# n efectivos desocupado
n_tilde[,2] <- (indicador_dam1$Desocupado*(1 - indicador_dam1$Desocupado))/indicador_dam1$Desocupado_var
Y_tilde[,2] <- n_tilde[,2]* indicador_dam1$Desocupado

# n efectivos Inactivo
n_tilde[,3] <- (indicador_dam1$Inactivo*(1 - indicador_dam1$Inactivo))/indicador_dam1$Inactivo_var
Y_tilde[,3] <- n_tilde[,3]* indicador_dam1$Inactivo

```

  Ahora, validamos la coherencia de los c치lculos realizados 
  
```{r, eval=FALSE}
ni_hat = rowSums(Y_tilde)
Y_hat[,1] <- ni_hat* indicador_dam1$Ocupado
Y_hat[,2] <- ni_hat* indicador_dam1$Desocupado
Y_hat[,3] <- ni_hat* indicador_dam1$Inactivo
Y_hat <- round(Y_hat)

hat_p <- Y_hat/rowSums(Y_hat)
plot(hat_p[,1],indicador_dam1$Ocupado)
plot(hat_p[,2],indicador_dam1$Desocupado)
plot(hat_p[,3],indicador_dam1$Inactivo)
```
  

```{r echo=FALSE, out.width = "800px", out.height="200px",fig.align='center'}
knitr::include_graphics("0Recursos/theta_ajustado.png")
```  

  4. Compilando el modelo 


```{r, eval=FALSE}
X1_obs <- cbind(matrix(1,nrow = D,ncol = 1),X_obs)
K = ncol(X1_obs)
D1 <- nrow(X_pred)
X1_pred <- cbind(matrix(1,nrow = D1,ncol = 1),X_pred)

sample_data <- list(D = D,
                    P = P,
                    K = K,
                    y_tilde = Y_hat,
                    X_obs = X1_obs,
                    X_pred = X1_pred,
                    D1 = D1)


library(rstan)
fit_mcmc2 <- stan(
  file = "Data/modelosStan/00 Multinomial_simple_no_cor.stan",  # Stan program
  data = sample_data,    # named list of data
  verbose = TRUE,
  warmup = 1000,          # number of warmup iterations per chain
  iter = 2000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain)
)

saveRDS(fit_mcmc2,
        "Data/fit_multinomial_no_cor.Rds")
```


## Validaci칩n del modelo 

La validaci칩n de un modelo es esencial para evaluar su capacidad para predecir de manera precisa y confiable los resultados futuros. En el caso de un modelo de 치rea con respuesta multinomial, la validaci칩n se enfoca en medir la precisi칩n del modelo para predecir las diferentes categor칤as de respuesta. El objetivo principal de la validaci칩n es determinar si el modelo es capaz de generalizar bien a datos no vistos y proporcionar predicciones precisas. Esto implica comparar las predicciones del modelo con los datos observados y utilizar m칠tricas de evaluaci칩n para medir el rendimiento del modelo. La validaci칩n del modelo es esencial para garantizar la calidad de las predicciones y la confiabilidad del modelo para su uso en aplicaciones futuras.

```{r, eval=FALSE}
infile <- paste0("Data/fit_multinomial_no_cor.Rds")
fit <- readRDS(infile)

theta_dir <- indicador_dam1 %>%  
  transmute(dam2,
    n = n_desocupado + n_ocupado + n_inactivo,
            Ocupado, Desocupado, Inactivo) 

color_scheme_set("brightblue")
theme_set(theme_bw(base_size = 15))
y_pred_B <- as.array(fit, pars = "theta") %>%
  as_draws_matrix()
  
rowsrandom <- sample(nrow(y_pred_B), 100)

theta_1<-  grep(pattern = "1]",x = colnames(y_pred_B),value = TRUE)
theta_2<-  grep(pattern = "2]",x = colnames(y_pred_B),value = TRUE)
theta_3<-  grep(pattern = "3]",x = colnames(y_pred_B),value = TRUE)
y_pred1 <- y_pred_B[rowsrandom,theta_1 ]
y_pred2 <- y_pred_B[rowsrandom,theta_2 ]
y_pred3 <- y_pred_B[rowsrandom,theta_3 ]

ppc_dens_overlay(y = as.numeric(theta_dir$Ocupado), y_pred1)/
  ppc_dens_overlay(y = as.numeric(theta_dir$Desocupado), y_pred2)/
  ppc_dens_overlay(y = as.numeric(theta_dir$Inactivo), y_pred3)

```


```{r echo=FALSE, out.width = "800px", out.height="200px",fig.align='center'}
knitr::include_graphics("0Recursos/ppc.png")
```  

## Estimaci칩n de los par치metros. 

El c칩digo crea dos matrices, `theta_obs_ordenado` y `theta_pred_ordenado`, que contienen las estimaciones medias de los par치metros del modelo de respuesta multinomial con covariables para los datos de observaci칩n y predicci칩n, respectivamente. La funci칩n `matrix()` se utiliza para dar formato a los datos con una matriz `nrow` x `ncol`, y se asignan nombres de columna apropiados a la matriz resultante utilizando `colnames()`. Luego se convierten las matrices en marcos de datos (`as.data.frame()`) y se unen mediante `full_join()` para crear una 칰nica tabla que contenga todas las estimaciones de los par치metros para los datos de observaci칩n y predicci칩n, junto con la informaci칩n del indicador de 치rea (theta_dir). El resultado final es un marco de datos llamado estimaciones_obs.

```{r, eval=FALSE}
dam_pred <- readRDS("Data/dam_pred.rds")
P <- 3 
D <- nrow(indicador_dam1)
D1 <- nrow(dam_pred)
## Estimaci칩n del modelo. 
theta_obs <- summary(fit, pars = "theta")$summary[, "mean"]
theta_pred <- summary(fit, pars = "theta_pred")$summary[, "mean"]

## Ordenando la matrix de theta 
theta_obs_ordenado <- matrix(theta_obs, 
                             nrow = D,
                             ncol = P,byrow = TRUE) 

colnames(theta_obs_ordenado) <- c("Ocupado_mod", "Desocupado_mod", "Inactivo_mod")
theta_obs_ordenado%<>% as.data.frame()
theta_obs_ordenado <- cbind(dam2 = indicador_dam1$dam2,
                            theta_obs_ordenado)

theta_pred_ordenado <- matrix(theta_pred, 
                             nrow = D1,
                             ncol = P,byrow = TRUE)

colnames(theta_pred_ordenado) <- c("Ocupado_mod", "Desocupado_mod", "Inactivo_mod")
theta_pred_ordenado%<>% as.data.frame()
theta_pred_ordenado <- cbind(dam2 = dam_pred$dam2, theta_pred_ordenado)
```

## Estimaci칩n de la desviaci칩n est치rdar y el coeficiente de valiaci칩n 

Este bloque de c칩digo corresponde al c치lculo de las desviaciones est치ndar (sd) y coeficientes de variaci칩n (cv) de los par치metros `theta` para los datos observados y predichos. En primer lugar, se utiliza la funci칩n `summary()` del paquete `rstan` para extraer los valores de `sd` de los par치metros `theta` observados y predichos, respectivamente, a partir del modelo (`fit`) que contiene la informaci칩n de la estimaci칩n de los par치metros de la distribuci칩n Bayesiana. Luego, se organizan los valores de sd en una matriz ordenada por `dam2` y se les asignan los nombres correspondientes. Con esta matriz, se calcula otra matriz que contiene los coeficientes de variaci칩n para los par치metros `theta` observados (`theta_obs_ordenado_cv`). De manera similar, se construyen matrices ordenadas por `dam2` para los valores de sd y cv de los par치metros theta predichos (`theta_pred_ordenado_sd` y `theta_pred_ordenado_cv`, respectivamente).


```{r, eval=FALSE}
theta_obs_sd <- summary(fit, pars = "theta")$summary[, "sd"]
theta_pred_sd <- summary(fit, pars = "theta_pred")$summary[, "sd"]

theta_obs_ordenado_sd <- matrix(theta_obs_sd, 
                             nrow = D,
                             ncol = P,byrow = TRUE) 

colnames(theta_obs_ordenado_sd) <- c("Ocupado_mod_sd", "Desocupado_mod_sd", "Inactivo_mod_sd")
theta_obs_ordenado_sd%<>% as.data.frame()
theta_obs_ordenado_sd <- cbind(dam2 = indicador_dam1$dam2,
                            theta_obs_ordenado_sd)
theta_obs_ordenado_cv <- theta_obs_ordenado_sd[,-1]/theta_obs_ordenado[,-1]

colnames(theta_obs_ordenado_cv) <- c("Ocupado_mod_cv", "Desocupado_mod_cv", "Inactivo_mod_cv")

theta_obs_ordenado_cv <- cbind(dam2 = indicador_dam1$dam2,
                               theta_obs_ordenado_cv)

theta_pred_ordenado_sd <- matrix(theta_pred_sd, 
                              nrow = D1,
                              ncol = P,byrow = TRUE)

colnames(theta_pred_ordenado_sd) <- c("Ocupado_mod_sd", "Desocupado_mod_sd", "Inactivo_mod_sd")
theta_pred_ordenado_sd%<>% as.data.frame()
theta_pred_ordenado_sd <- cbind(dam2 = dam_pred$dam2, theta_pred_ordenado_sd)

theta_pred_ordenado_cv <- theta_pred_ordenado_sd[,-1]/theta_pred_ordenado[,-1]

colnames(theta_pred_ordenado_cv) <- c("Ocupado_mod_cv", "Desocupado_mod_cv", "Inactivo_mod_cv")

theta_pred_ordenado_cv <- cbind(dam2 = dam_pred$dam2, theta_pred_ordenado_cv)

```

El 칰ltimo paso es realizar la consolidaci칩n de la bases obtenidas para la estimaci칩n puntual, desviaci칩n est치ndar y coeficiente de variaci칩n. 

```{r, eval=FALSE}
theta_obs_ordenado <- full_join(theta_obs_ordenado,theta_obs_ordenado_sd) %>% 
  full_join(theta_obs_ordenado_cv)

theta_pred_ordenado <- full_join(theta_pred_ordenado,theta_pred_ordenado_sd) %>% 
  full_join(theta_pred_ordenado_cv)


estimaciones <- full_join(indicador_dam1,
                              bind_rows(theta_obs_ordenado, theta_pred_ordenado))

saveRDS(object = estimaciones, file = "Data/estimaciones.rds")
tba(head(estimaciones,10))
```

```{r, echo=FALSE}
estimaciones <- readRDS("Data/estimaciones.rds")
tba(head(estimaciones,10))
```

## Metodolog칤a de Benchmarking 

  1. Conteos de personas agregados por dam2, personas mayores de 15 a침os de edad. 
  
```{r}
conteo_pp_dam <- readRDS("Data/censo_dam2.rds") %>%
  filter(edad > 1)  %>% 
  group_by(dam , dam2) %>% 
  summarise(pp_dam2 = sum(n),.groups = "drop") %>% 
mutate(pp_dam = sum(pp_dam2))
head(conteo_pp_dam) %>% tba()
```

  2.    Estimaci칩n del par치metro `theta` al nivel que la encuesta sea representativa.
  
```{r}
Razon_empleo <-
  diseno %>%
  filter(empleo %in% c(1:3)) %>%
  summarise(
    Ocupado = survey_ratio(numerator = (empleo == 1), 
                           denominator = 1 ),
    Desocupado = survey_ratio(numerator =( empleo == 2),denominator = 1
                             
    ),
    Inactivo = survey_ratio(numerator =  (empleo == 3), denominator = 1
                           
    )
  ) %>% select(Ocupado,Desocupado, Inactivo)
tba(Razon_empleo)
```
  
  3.  Definir los pesos por dominios. 
  
```{r}
names_cov <-  "Nacional"
estimaciones_mod <- estimaciones %>% transmute(
  dam = substr(dam2,1,2),
  dam2,Ocupado_mod,Desocupado_mod,Inactivo_mod) %>% 
  inner_join(conteo_pp_dam ) %>% 
  mutate(wi = pp_dam2/pp_dam,
         Nacional = "1")
```
  
  4. Crear variables dummys 
  
```{r}
estimaciones_mod %<>%
  fastDummies::dummy_cols(select_columns = names_cov,
                          remove_selected_columns = FALSE)

Xdummy <- estimaciones_mod %>% select(matches("Nacional_")) %>% 
  mutate_at(vars(matches("_\\d")) ,
            list(Ocupado = function(x) x*estimaciones_mod$Ocupado_mod,
                 Desocupado = function(x) x*estimaciones_mod$Desocupado_mod,
                 Inactivo = function(x) x*estimaciones_mod$Inactivo_mod)) %>% 
  select((matches("Ocupado|Desocupado|Inactivo"))) 
head(Xdummy) %>% tba()
```
  
  5.    Calcular el ponderador para cada nivel de la variable. 
  
#### Ocupado {-}
    
```{r, eval=FALSE}
library(sampling)
names_ocupado <- grep(pattern = "^O", x = colnames(Xdummy),value = TRUE)
gk_ocupado <- calib(Xs = Xdummy[,names_ocupado] %>% as.matrix(), 
            d =  estimaciones_mod$wi,
            total = Razon_empleo[names_ocupado] %>% as.matrix(),
            method="linear",max_iter = 5000,) 

checkcalibration(Xs = Xdummy[,names_ocupado] %>% as.matrix(), 
                 d =estimaciones_mod$wi,
                 total = Razon_empleo[names_ocupado] %>% as.matrix(),
                 g = gk_ocupado,)

```

#### Desocupado {-} 
    
```{r, eval=FALSE}
names_descupados <- grep(pattern = "^D", x = colnames(Xdummy),value = TRUE)

gk_desocupado <- calib(Xs = Xdummy[,names_descupados]%>% as.matrix(), 
                    d =  estimaciones_mod$wi,
                    total = Razon_empleo[names_descupados]%>% as.matrix(),
                    method="linear",max_iter = 5000,) 

checkcalibration(Xs = Xdummy[,names_descupados]%>% as.matrix(), 
                 d =estimaciones_mod$wi,
                 total = Razon_empleo[names_descupados]%>% as.matrix(),
                 g = gk_desocupado,)
```

#### Inactivo {-}

```{r, eval=FALSE}
names_inactivo <- grep(pattern = "^I", x = colnames(Xdummy),value = TRUE)

gk_Inactivo <- calib(Xs = Xdummy[,names_inactivo]%>% as.matrix(), 
                    d =  estimaciones_mod$wi,
                    total = Razon_empleo[names_inactivo]%>% as.matrix(),
                    method="linear",max_iter = 5000,) 

checkcalibration(Xs = Xdummy[,names_inactivo]%>% as.matrix(), 
                 d =estimaciones_mod$wi,
                 total = Razon_empleo[names_inactivo]%>% as.matrix(),
                 g = gk_Inactivo,)


```
  
  6.    Validar los resultados obtenidos. 
  
```{r, eval=FALSE}
par(mfrow = c(1,3))
hist(gk_ocupado)
hist(gk_desocupado)
hist(gk_Inactivo)
```


```{r echo=FALSE, out.width = "800px", out.height="200px",fig.align='center'}
knitr::include_graphics("0Recursos/Plot_Bench_gk.jpeg")
```  


  7.    Estimaciones ajustadas por el ponderador
  
```{r, eval=FALSE}
estimacionesBench <- estimaciones_mod %>%
  mutate(gk_ocupado, gk_desocupado, gk_Inactivo) %>%
  transmute(
    dam,
    dam2,
    wi,gk_ocupado, gk_desocupado, gk_Inactivo,
    Ocupado_Bench = Ocupado_mod*gk_ocupado,
    Desocupado_Bench = Desocupado_mod*gk_desocupado,
    Inactivo_Bench = Inactivo_mod*gk_Inactivo
  )
```

  8.    Validaci칩n de resultados. 
  
```{r, eval=FALSE}
estimacionesBench %>%
  summarise(Ocupado_Bench = sum(wi*Ocupado_Bench),
            Desocupado_Bench = sum(wi*Desocupado_Bench),
            Inactivo_Bench = sum(wi*Inactivo_Bench)) %>% tba()
  
Razon_empleo %>% tba()
```

```{r, echo=FALSE}
tablas <- readRDS("0Recursos/tablas.rds")
tba(tablas$tbla1)
tba(tablas$tbla2)
```


  9. Guardar resultados 
  
```{r, eval=FALSE}
estimaciones <- inner_join(estimaciones,estimacionesBench)
saveRDS(object = estimaciones, file = "Data/estimaciones_Bench.rds")
```

```{r, echo=FALSE}
estimaciones <- readRDS("Data/estimaciones_Bench.rds")
```

## Mapas del mercado de trabajo.

El c칩digo carga las librer칤as `sp`, `sf` y `tmap`. Luego, se lee un archivo shapefile con informaci칩n geogr치fica y se utiliza la funci칩n 'inner_join' para unirlo con las estimaciones de la encuesta previamente calculadas. Posteriormente, se definen los puntos de corte para la generaci칩n de los intervalos de clase en los mapas de cada variable de inter칠s (ocupados, desocupados e inactivos) y se asignan a las variables 'brks_ocupado', 'brks_desocupado' y 'brks_inactivo', respectivamente.

```{r, eval=FALSE}
library(sp)
library(sf)
library(tmap)
ShapeSAE <- read_sf("Shape/COL_dam2.shp")

P1_empleo <- tm_shape(ShapeSAE %>%
                           inner_join(estimaciones))
brks_ocupado <- seq(0.2,0.8,0.1)
brks_desocupado <- seq(0,0.2,0.05)
brks_inactivo <- seq(0.17,0.62, 0.09)

```

### Ocupado {-}

Este c칩digo est치 creando un mapa de la variable "Ocupado" utilizando la funci칩n `tm_fill()` de la librer칤a `tmap.` Los valores de la variable se clasifican en diferentes categor칤as utilizando la funci칩n breaks, y se establece un t칤tulo para la leyenda del mapa con el argumento title. Se utiliza una paleta de colores llamada "-Blues" para representar las diferentes categor칤as de la variable en el mapa. La funci칩n tm_layout se utiliza para establecer algunas caracter칤sticas del dise침o del mapa, como el tama침o de la leyenda, el tama침o de la fuente, y la relaci칩n de aspecto del mapa. Finalmente, el mapa se guarda en la variable Mapa_ocupado. 

```{r, eval=FALSE}
Mapa_ocupado <-
  P1_empleo +
  tm_fill("Ocupado_Bench",
          breaks = brks_ocupado,
          title = "Ocupado",
          palette = "-Blues") +
  tm_layout(
    legend.only = FALSE,
    legend.height = -0.5,
    legend.width = -0.5,
    asp = 1.5,
    legend.text.size = 3,
    legend.title.size = 3
  )
Mapa_ocupado
```


```{r echo=FALSE, out.width = "800px", out.height="200px",fig.align='center'}
knitr::include_graphics("0Recursos/Ocupados.png")
```

### Desocupado {-} 

Este c칩digo utiliza la funci칩n `tm_fill()` de la librer칤a `tmap` para crear un mapa tem치tico del indicador de "desocupado" a nivel de las 치reas geogr치ficas definidas en el archivo de pol칤gonos `ShapeSAE`. La paleta de colores utilizada para representar los valores del indicador es la "YlOrRd". Se especifican los mismos par치metros de `tm_layout()` que en el mapa anterior para definir el dise침o general del mapa.

```{r, eval=FALSE}
Mapa_desocupado <-
  P1_empleo + tm_fill(
    "Desocupado_Bench",
    breaks = brks_desocupado,
    title =  "Desocupado",
    palette = "YlOrRd"
  ) + tm_layout( 
    legend.only = FALSE,
    legend.height = -0.5,
    legend.width = -0.5,
    asp = 1.5,
    legend.text.size = 3,
    legend.title.size = 3)
Mapa_desocupado
```


```{r echo=FALSE, out.width = "800px", out.height="200px",fig.align='center'}
knitr::include_graphics("0Recursos/Desocupados.png")
```


### Inactivo {-} 

Este c칩digo genera un mapa tem치tico de la variable "Inactivo" utilizando la librer칤a `tmap`. Primero se carga el archivo de `shapefile` y se hace una uni칩n con las estimaciones previamente calculadas. Luego se utiliza la funci칩n `tm_fill()` para especificar que se desea utilizar el valor de la variable "Inactivo" para el relleno del mapa. Se definen los intervalos de la paleta de colores con la variable "brks_inactivo" y se especifica el t칤tulo del mapa con la opci칩n "title". Finalmente, se configura el dise침o del mapa con la funci칩n `tm_layout()`, donde se ajustan par치metros como el tama침o del texto y de la leyenda, y se establece el aspecto del mapa en 1.5 para una mejor visualizaci칩n.

```{r, eval=FALSE}
Mapa_Inactivo <-
  P1_empleo + tm_fill(
      "Inactivo_Bench",
    title =  "Inactivo",
    breaks = brks_inactivo,
    palette = "YlGn"
  ) + tm_layout( 
    legend.only = FALSE,
    legend.height = -0.5,
    legend.width = -0.5,
    asp = 1.5,
    legend.text.size = 3,
    legend.title.size = 3)
```

```{r echo=FALSE, out.width = "800px", out.height="200px",fig.align='center'}
knitr::include_graphics("0Recursos/Inactivo.png")
```

    
  