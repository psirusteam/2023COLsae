[["index.html", "Desagregación de datos en encuestas de hogares: metodologías bayesianas para modelos de estimación en áreas pequeñas Agenda", " Desagregación de datos en encuestas de hogares: metodologías bayesianas para modelos de estimación en áreas pequeñas Andrés Gutiérrez1, Stalyn Guerrero2 2023-03-15 Agenda Experto Regional en Estadísticas Sociales - Comisión Económica para América Latina y el Caribe (CEPAL) - andres.gutierrez@cepal.org↩︎ Consultor - Comisión Económica para América Latina y el Caribe (CEPAL), guerrerostalyn@gmail.com↩︎ "],["censo-e-información-satelital.html", "Capítulo 1 Censo e información satelital", " Capítulo 1 Censo e información satelital "],["uso-de-imágenes-satelitales-y-sae.html", "Capítulo 2 Uso de imágenes satelitales y SAE", " Capítulo 2 Uso de imágenes satelitales y SAE Uno de los artículo pioneros de estimación de áreas pequeñas fue el artículo de Singh, R, et. al. (2002) el cual abordó la estimación del rendimiento de cultivos para los tehsil (unidad subadministrativa) del distriyo Rohtak district en Haryana (India). Las imágenes raster representan el mundo mediante un conjunto de celdas contiguas igualmente espaciadas conocidas como pixeles, estas imágenes tienen información como un sistema de información geográfico, Un sistema de referencia de coordenadas. Las imágenes almacenan un identificador, un valor en cada pixel (o un vector con diferentes valores) y cada celda tiene asociada una escala de colores. Las imágenes pueden obtenerse crudas y procesadas, estas primeras contienen solamente las capas de colores, las segundas contienen también valores que han sido procesados en cada celda (índices de vegetación, intensidad lumínica, tipo de vegetación). La información cruda puede utilizarse para entrenar características que se desean entrenar (carreteras, tipo de cultivo, bosque / no bosque), afortunadamente en Google Earth Engine encontramos muchos indicadores procesadas asociadas a un pixel. Estos indicadores pueden agregarse a nivel de un área geográfica. 2.0.1 Fuentes de datos de imágenes satelitales Algunas de las principales fuentes de imágenes satelitales son: http://earthexplorer.usgs.gov/ https://lpdaacsvc.cr.usgs.gov/appeears/ https://search.earthdata.nasa.gov/search https://scihub.coGTMnicus.eu/ https://aws.amazon.com/public-data-sets/landsat/ Sin embargo la mayor parte de estas fuentes están centralizadas en Google Earth Engine que permite buscar fuentes de datos provenientes de imágenes satelitales. GEE se puede manejar por medio de APIS en diferentes lenguajes de programación: Javascript (por defecto), Python y R (paquete rgee). "],["google-earth-eninge.html", "Capítulo 3 Google Earth Eninge", " Capítulo 3 Google Earth Eninge Crear una cuenta en link, una vez que se ingrese a la cuenta puede buscarse los conjuntos de datos de interés: Una vez se busque el conjunto de datos se puede abrir un editor de código brindado por google en Javascript. Copiar y pegar la sintaxis que brinda el buscador de conjunto de datos para visualizar la imagen raster y disponer de sentencias que GTMmitan la obtención del conjunto de datos de interés posteriormente en R "],["instalación-de-rgee.html", "Capítulo 4 Instalación de rgee", " Capítulo 4 Instalación de rgee Descargar e instalar anaconda o conda. (https://www.anaconda.com/products/individual) Abrir Anaconda prompt y configurar ambiente de trabajo (ambiente python rgee_py) con las siguientes sentencias: conda create -n rgee_py python=3.9 activate rgee_py pip install google-api-python-client pip install earthengine-api pip install numpy Listar los ambientes de Python disponibles en anaconda prompt conda env list Una vez identificado la ruta del ambiente ambiente rgee_py definirla en R (no se debe olvidar cambiar \\ por /). Instalar reticulate y rgee, cargar paquetes para procesamiento espacial y configurar el ambiente de trabajo como sigue: library(reticulate) # Conexión con Python library(rgee) # Conexión con Google Earth Engine library(sf) # Paquete para manejar datos geográficos library(dplyr) # Paquete para procesamiento de datos rgee_environment_dir = &quot;C://Users//sguerrero//Anaconda3//envs//rgee_py//python.exe&quot; # Configurar python (Algunas veces no es detectado y se debe reiniciar R) reticulate::use_python(rgee_environment_dir, required=T) rgee::ee_install_set_pyenv(py_path = rgee_environment_dir, py_env = &quot;rgee_py&quot;) Sys.setenv(RETICULATE_PYTHON = rgee_environment_dir) Sys.setenv(EARTHENGINE_PYTHON = rgee_environment_dir) Una vez configurado el ambiente puede iniciarlizarse una sesión de Google Earth Engine como sigue: rgee::ee_Initialize(drive = T) Notas: Se debe inicializar cada sesión con el comando rgee::ee_Initialize(drive = T). Los comandos de javascript que invoquen métodos con “.” se sustituyen por signo peso ($), por ejemplo: ee.ImageCollection().filterDate() # Javascript ee$ImageCollection()$filterDate() # R "],["descargar-información-satelital.html", "4.1 Descargar información satelital", " 4.1 Descargar información satelital Paso 1: disponer de los shapefile # shape &lt;- read_sf(&quot;Shape/COL_dam2.shp&quot;) shape &lt;- read_sf(&quot;Recursos/Día1/Sesion3/Shape/COL.shp&quot;) plot(shape[&quot;geometry&quot;]) Paso 2: Seleccionar el archivo de imágenes que desea procesar, para nuestro ejemplo luces nocturnas. luces &lt;- ee$ImageCollection(&quot;NOAA/DMSP-OLS/NIGHTTIME_LIGHTS&quot;) %&gt;% ee$ImageCollection$filterDate(&quot;2013-01-01&quot;, &quot;2014-01-01&quot;) %&gt;% ee$ImageCollection$map(function(x) x$select(&quot;stable_lights&quot;)) %&gt;% ee$ImageCollection$toBands() Paso 3: Descargar la información ## Tiempo 10 minutos shape_luces &lt;- map(unique(shape$dam), ~tryCatch(ee_extract( x = luces, y = shape[&quot;dam&quot;] %&gt;% filter(dam == .x), ee$Reducer$mean(), sf = FALSE ) %&gt;% mutate(dam = .x), error = function(e)data.frame(dam = .x))) shape_luces %&lt;&gt;% bind_rows() tba(shape_luces, cap = &quot;Promedio de luces nocturnasa&quot;) "],["repetir-la-rutina-para.html", "4.2 Repetir la rutina para:", " 4.2 Repetir la rutina para: Tipo de suelo: crops-coverfraction (Porcentaje de cubrimiento cultivos) y urban-coverfraction (Porcentaje de cobertura urbana) disponibles en https://develoGTMs.google.com/earth-engine/datasets/catalog/COGTMNICUS_Landcover_100m_Proba-V-C3_Global#description Tiempo de viaje al hospital o clínica más cercana (accessibility) y tiempo de viaje al hospital o clínica más cercana utilizando transporte no motorizado (accessibility_walking_only) información disponible en https://develoGTMs.google.com/earth-engine/datasets/catalog/Oxford_MAP_accessibility_to_healthcare_2019 Modificación humana, donde se consideran los asentamiento humano, la agricultura, el transporte, la minería y producción de energía e infraestructura eléctrica. En el siguiente link encuentra la información satelital https://develoGTMs.google.com/earth-engine/datasets/catalog/CSP_HM_GlobalHumanModification#description Paso 4 consolidar la información. dam luces_nocturnas cubrimiento_cultivo cubrimiento_urbano modificacion_humana accesibilidad_hospitales accesibilidad_hosp_caminado 05 2.3809 1.2755 0.6900 0.2947 181.1119 420.4946 08 13.0102 9.7734 4.7396 0.4943 28.2639 154.5701 11 21.5163 9.7879 19.8337 0.5509 60.7259 267.8848 13 1.9374 1.9246 0.6285 0.2911 216.2115 501.9515 15 2.6495 13.8033 0.5758 0.2965 115.8310 309.3832 17 4.4541 2.5939 0.8696 0.3639 62.2349 228.6569 18 0.0877 0.2771 0.0456 0.1248 1218.6141 2505.8205 19 1.4020 4.0623 0.3414 0.2231 214.3356 406.7882 20 2.6586 10.6343 0.4973 0.3349 99.1499 365.6516 23 2.2205 10.5568 0.5211 0.3331 141.3763 441.9516 Los resultados se muestran en los siguientes mapas "],["luces-nocturnas.html", "4.3 Luces nocturnas", " 4.3 Luces nocturnas "],["cubrimiento-cultivos.html", "4.4 Cubrimiento cultivos", " 4.4 Cubrimiento cultivos "],["cubrimiento-urbanos.html", "4.5 Cubrimiento urbanos", " 4.5 Cubrimiento urbanos "],["modificación-humana.html", "4.6 Modificación humana", " 4.6 Modificación humana "],["tiempo-promedio-al-hospital.html", "4.7 Tiempo promedio al hospital", " 4.7 Tiempo promedio al hospital "],["tiempo-promedio-al-hospital-en-vehiculo-no-motorizado.html", "4.8 Tiempo promedio al hospital en vehiculo no motorizado", " 4.8 Tiempo promedio al hospital en vehiculo no motorizado "],["resultados-de-la-información-censal..html", "4.9 Resultados de la información censal.", " 4.9 Resultados de la información censal. predictors_censo_dam &lt;- readRDS(&quot;Recursos/Día1/Sesion3/Data/predictors_censo_dam.rds&quot;) temp2 &lt;- inner_join(shape[&quot;dam&quot;], predictors_censo_dam) for(ii in names(predictors_censo_dam[,-1])){ plot( temp2[ii], key.pos = 4, breaks = quantile(temp2[[ii]])) } "],["fundamentos-de-la-inferencia-bayesiana-en-r-y-stan.html", "Capítulo 5 Fundamentos de la inferencia Bayesiana en R y STAN ", " Capítulo 5 Fundamentos de la inferencia Bayesiana en R y STAN "],["regla-de-bayes.html", "5.1 Regla de Bayes", " 5.1 Regla de Bayes En términos de inferencia para \\(\\boldsymbol{\\theta}\\), es necesario encontrar la distribución de los parámetros condicionada a la observación de los datos. Para este fin, es necesario definir la distribución conjunta de la variable de interés con el vector de parámetros. \\[ p(\\boldsymbol{\\theta},\\mathbf{Y})=p(\\boldsymbol{\\theta})p(\\mathbf{Y} \\mid \\boldsymbol{\\theta}) \\] La distribución \\(p(\\boldsymbol{\\theta})\\) se le conoce con el nombre de distribución previa. El término \\(p(\\mathbf{Y} \\mid \\boldsymbol{\\theta})\\) es la distribución de muestreo, verosimilitud o distribución de los datos. La distribución del vector de parámetros condicionada a los datos observados está dada por \\[ p(\\boldsymbol{\\theta} \\mid \\mathbf{Y})=\\frac{p(\\boldsymbol{\\theta},\\mathbf{Y})}{p(\\mathbf{Y})}=\\frac{p(\\boldsymbol{\\theta})p(\\mathbf{Y} \\mid \\boldsymbol{\\theta})}{p(\\mathbf{Y})} \\] A la distribución \\(p(\\boldsymbol{\\theta} \\mid \\mathbf{Y})\\) se le conoce con el nombre de distribución posterior. Nótese que el denominador no depende del vector de parámetros y considerando a los datos observados como fijos, corresponde a una constante y puede ser obviada. Por lo tanto, otra representación de la regla de Bayes está dada por \\[ p(\\boldsymbol{\\theta} \\mid \\mathbf{Y})\\propto p(\\mathbf{Y} \\mid \\boldsymbol{\\theta})p(\\boldsymbol{\\theta}) \\] "],["inferencia-bayesiana..html", "5.2 Inferencia Bayesiana.", " 5.2 Inferencia Bayesiana. En términos de estimación, inferencia y predicción, el enfoque Bayesiano supone dos momentos o etapas: Antes de la recolección de las datos, en donde el investigador propone, basado en su conocimiento, experiencia o fuentes externas, una distribución de probabilidad previa para el parámetro de interés. Después de la recolección de los datos. Siguiendo el teorema de Bayes, el investigador actualiza su conocimiento acerca del comportamiento probabilístico del parámetro de interés mediante la distribución posterior de este. "],["modelos-uniparamétricos.html", "5.3 Modelos uniparamétricos", " 5.3 Modelos uniparamétricos Los modelos que están definidos en términos de un solo parámetro que pertenece al conjunto de los números reales se definen como modelos uniparamétricos. "],["modelo-bernoulli.html", "5.4 Modelo Bernoulli", " 5.4 Modelo Bernoulli Suponga que \\(Y\\) es una variable aleatoria con distribución Bernoulli dada por: \\[ p(Y \\mid \\theta)=\\theta^y(1-\\theta)^{1-y}I_{\\{0,1\\}}(y) \\] Como el parámetro \\(\\theta\\) está restringido al espacio \\(\\Theta=[0,1]\\), entonces es posible formular varias opciones para la distribución previa del parámetro. En particular, la distribución uniforme restringida al intervalo \\([0,1]\\) o la distribución Beta parecen ser buenas opciones. Puesto que la distribución uniforme es un caso particular de la distribución Beta. Por lo tanto la distribución previa del parámetro \\(\\theta\\) estará dada por \\[ \\begin{equation} p(\\theta \\mid \\alpha,\\beta)= \\frac{1}{Beta(\\alpha,\\beta)}\\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}I_{[0,1]}(\\theta). \\end{equation} \\] y la distribución posterior del parámetro \\(\\theta\\) sigue una distribución \\[ \\begin{equation*} \\theta \\mid Y \\sim Beta(y+\\alpha,\\beta-y+1) \\end{equation*} \\] Cuando se tiene una muestra aleatoria \\(Y_1,\\ldots,Y_n\\) de variables con distribución Bernoulli de parámetro \\(\\theta\\), entonces la distribución posterior del parámetro de interés es \\[ \\begin{equation*} \\theta \\mid Y_1,\\ldots,Y_n \\sim Beta\\left(\\sum_{i=1}^ny_i+\\alpha,\\beta-\\sum_{i=1}^ny_i+n\\right) \\end{equation*} \\] 5.4.1 Práctica en R library(tidyverse) encuesta &lt;- readRDS(&quot;Recursos/Día1/Sesion4/Data/encuestaCOL18N1.rds&quot;) Sea \\(Y\\) la variable aleatoria \\[ Y_{i}=\\begin{cases} 1 &amp; ingreso&lt;lp\\\\ 0 &amp; ingreso\\geq lp \\end{cases} \\] El tamaño de la muestra es de 19877 Indígena datay &lt;- encuesta %&gt;% filter(etnia_ee == 1) %&gt;% transmute(y = ifelse(ingcorte &lt; lp, 1,0)) addmargins(table(datay$y)) 0 1 Sum 9579 10298 19877 Un grupo de estadístico experto decide utilizar una distribución previa Beta, definiendo los parámetros de la distribución previa como \\(Beta(\\alpha=1, \\beta=1)\\). La distribución posterior del parámetro de interés, que representa la probabilidad de estar por debajo de la linea de pobreza, es \\(Beta(1.0298\\times 10^{4} + 1, 1 - 1.0298\\times 10^{4} + 19877)=Beta(1.0299\\times 10^{4}, 9580)\\) Figura 5.1: Distribución previa (línea roja) y distribución posterior (línea negra) La estimación del parámetro estaría dado por: \\[ E(X) = \\frac{\\alpha}{\\alpha + \\beta} = \\frac{1.0299\\times 10^{4}}{1.0299\\times 10^{4}+ 9580} = 0.5180844 \\] luego, el intervalo de credibilidad para la distribución posterior es. n = length(datay$y) n1 = sum(datay$y) qbeta(c(0.025, 0.975), shape1 = 1 + n1, shape2 = 1 - n1 + n) ## [1] 0.5111369 0.5250285 5.4.2 Práctica en STAN En STAN es posible obtener el mismo tipo de inferencia creando cuatro cadenas cuya distribución de probabilidad coincide con la distribución posterior del ejemplo. ## Definir el modelo data { // Entrada el modelo int&lt;lower=0&gt; n; // Numero de observaciones int y[n]; // Vector de longitud n real a; real b; } parameters { // Definir parámetro real&lt;lower=0, upper=1&gt; theta; } model { // Definir modelo y ~ bernoulli(theta); theta ~ beta(a, b); // Distribución previa } generated quantities { real ypred[n]; // vector de longitud n for (ii in 1:n){ ypred[ii] = bernoulli_rng(theta); } } Para compilar STAN debemos definir los parámetros de entrada sample_data &lt;- list(n = nrow(datay), y = datay$y, a = 1, b = 1) Para ejecutar STAN en R tenemos la librería cmdstanr library(cmdstanr) # file.edit(&quot;Recursos/Día1/Sesion4/Data/modelosStan/1Bernoulli.stan&quot;) Bernoulli &lt;- cmdstan_model(stan_file = &quot;Recursos/Día1/Sesion4/Data/modelosStan/1Bernoulli.stan&quot;) model_Bernoulli &lt;- Bernoulli$sample(data = sample_data, chains = 4, parallel_chains = 4, seed = 1234, refresh = 1000) ## Running MCMC with 4 parallel chains... ## ## Chain 1 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 1 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 1 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 2 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 2 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 2 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 3 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 3 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 3 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 4 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 4 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 4 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 2 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 1 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 2 finished in 67.2 seconds. ## Chain 1 finished in 67.6 seconds. ## Chain 3 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 3 finished in 67.5 seconds. ## Chain 4 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 4 finished in 66.6 seconds. ## ## All 4 chains finished successfully. ## Mean chain execution time: 67.2 seconds. ## Total execution time: 69.6 seconds. La estimación del parámetro \\(\\theta\\) es: model_Bernoulli$summary(variables = &quot;theta&quot;) %&gt;% select(variable:q95) %&gt;% tba() variable mean median sd mad q5 q95 theta 0.5182 0.5182 0.0034 0.0034 0.5126 0.5238 Para observar las cadenas compilamos las lineas de código library(posterior) library(ggplot2) temp &lt;- as_draws_df(model_Bernoulli$draws(variables = &quot;theta&quot;)) ggplot(data = temp, aes(x = theta))+ geom_density(color = &quot;blue&quot;, size = 2) + stat_function(fun = posterior1, args = list(y = datay$y), size = 2) + theme_bw(base_size = 20) + labs(x = latex2exp::TeX(&quot;\\\\theta&quot;), y = latex2exp::TeX(&quot;f(\\\\theta)&quot;)) Figura 5.2: Resultado con STAN (línea azul) y posterior teórica (línea negra) Para validar las cadenas library(bayesplot) (mcmc_dens_chains(model_Bernoulli$draws(&quot;theta&quot;)) + mcmc_areas(model_Bernoulli$draws(&quot;theta&quot;)))/ mcmc_trace(model_Bernoulli$draws(&quot;theta&quot;)) Predicción de \\(Y\\) en cada una de las iteraciones de las cadenas. y_pred_B &lt;- model_Bernoulli$draws(variables = &quot;ypred&quot;, format = &quot;matrix&quot;) rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, 1:n] ppc_dens_overlay(y = datay$y, y_pred2) "],["modelo-binomial.html", "5.5 Modelo Binomial", " 5.5 Modelo Binomial Cuando se dispone de una muestra aleatoria de variables con distribución Bernoulli \\(Y_1,\\ldots,Y_n\\), la inferencia Bayesiana se puede llevar a cabo usando la distribución Binomial, puesto que es bien sabido que la suma de variables aleatorias Bernoulli \\[ \\begin{equation*} S=\\sum_{i=1}^nY_i \\end{equation*} \\] sigue una distribución Binomial. Es decir: \\[ \\begin{equation} p(S \\mid \\theta)=\\binom{n}{s}\\theta^s(1-\\theta)^{n-s}I_{\\{0,1,\\ldots,n\\}}(s), \\end{equation} \\] Nótese que la distribución Binomial es un caso general para la distribución Bernoulli, cuando \\(n=1\\). Por lo tanto es natural suponer que distribución previa del parámetro \\(\\theta\\) estará dada por \\[ \\begin{equation} p(\\theta \\mid \\alpha,\\beta)= \\frac{1}{Beta(\\alpha,\\beta)}\\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}I_{[0,1]}(\\theta). \\end{equation} \\] La distribución posterior del parámetro \\(\\theta\\) sigue una distribución \\[ \\begin{equation*} \\theta \\mid S \\sim Beta(s+\\alpha,\\beta-s+n) \\end{equation*} \\] Ahora, cuando se tiene una sucesión de variables aleatorias \\(S_1,\\ldots,S_i, \\ldots,S_k\\) independientes y con distribución \\(Binomial(n_i,\\theta_i)\\) para \\(i=1,\\ldots,k\\), entonces la distribución posterior del parámetro de interés \\(\\theta_i\\) es \\[ \\begin{equation*} \\theta_i \\mid s_i \\sim Beta\\left(s_i+\\alpha,\\ \\beta+ n_i- s_i\\right) \\end{equation*} \\] 5.5.1 Práctica en STAN Sea \\(S_k\\) el conteo de personas en condición de pobreza en el \\(k-ésimo\\) departamento en la muestra. dataS &lt;- encuesta %&gt;% transmute( dam = dam_ee, y = ifelse(ingcorte &lt; lp, 1,0) ) %&gt;% group_by(dam) %&gt;% summarise(nd = n(), #Número de ensayos Sd = sum(y) #Número de éxito ) tba(dataS) dam nd Sd 05 45467 7301 08 44321 10297 11 32213 4128 13 35610 10560 15 26485 5717 17 30764 4524 18 28842 11134 19 34357 12348 20 32454 12203 23 31986 10528 25 9068 1516 27 26828 12934 41 30728 8188 44 35618 16412 47 37634 13500 50 29317 6653 52 28927 8949 54 31384 12663 63 28276 6195 66 29199 4664 68 31778 5127 70 35525 11881 73 28416 6295 76 37556 7073 Creando código de STAN data { int&lt;lower=0&gt; K; // Número de provincia int&lt;lower=0&gt; n[K]; // Número de ensayos int&lt;lower=0&gt; s[K]; // Número de éxitos real a; real b; } parameters { real&lt;lower=0, upper=1&gt; theta[K]; // theta_d|s_d } model { for(kk in 1:K) { s[kk] ~ binomial(n[kk], theta[kk]); } to_vector(theta) ~ beta(a, b); } generated quantities { real spred[K]; // vector de longitud K for(kk in 1:K){ spred[kk] = binomial_rng(n[kk],theta[kk]); } } Preparando el código de STAN ## Definir el modelo # file.edit(&quot;Recursos/Día1/Sesion4/Data/modelosStan/3Binomial.stan&quot;) Binomial2 &lt;- cmdstan_model(stan_file = &quot;Recursos/Día1/Sesion4/Data/modelosStan/3Binomial.stan&quot;) Organizando datos para STAN sample_data &lt;- list(K = nrow(dataS), s = dataS$Sd, n = dataS$nd, a = 1, b = 1) Para ejecutar STAN en R tenemos la librería cmdstanr model_Binomial2 &lt;- Binomial2$sample(data = sample_data, chains = 4, parallel_chains = 4, seed = 1234, refresh = 1000) ## Running MCMC with 4 parallel chains... ## ## Chain 1 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 1 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 1 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 2 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 2 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 2 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 3 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 1 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 1 finished in 1.5 seconds. ## Chain 2 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 2 finished in 1.7 seconds. ## Chain 3 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 3 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 4 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 4 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 4 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 3 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 3 finished in 1.5 seconds. ## Chain 4 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 4 finished in 1.2 seconds. ## ## All 4 chains finished successfully. ## Mean chain execution time: 1.5 seconds. ## Total execution time: 3.5 seconds. La estimación del parámetro \\(\\theta\\) es: model_Binomial2$summary(variables = &quot;theta&quot;) %&gt;% select(variable:q95) %&gt;% tba() variable mean median sd mad q5 q95 theta[1] 0.1606 0.1606 0.0018 0.0017 0.1577 0.1635 theta[2] 0.2324 0.2324 0.0020 0.0020 0.2290 0.2357 theta[3] 0.1282 0.1282 0.0019 0.0019 0.1251 0.1314 theta[4] 0.2966 0.2966 0.0024 0.0023 0.2927 0.3006 theta[5] 0.2159 0.2159 0.0025 0.0025 0.2117 0.2201 theta[6] 0.1471 0.1471 0.0020 0.0020 0.1438 0.1503 theta[7] 0.3860 0.3860 0.0028 0.0028 0.3813 0.3906 theta[8] 0.3594 0.3594 0.0025 0.0026 0.3552 0.3635 theta[9] 0.3760 0.3761 0.0027 0.0027 0.3717 0.3805 theta[10] 0.3291 0.3291 0.0027 0.0027 0.3248 0.3336 theta[11] 0.1672 0.1671 0.0040 0.0041 0.1608 0.1737 theta[12] 0.4821 0.4820 0.0031 0.0030 0.4771 0.4872 theta[13] 0.2665 0.2664 0.0025 0.0026 0.2624 0.2704 theta[14] 0.4608 0.4608 0.0027 0.0027 0.4564 0.4651 theta[15] 0.3587 0.3588 0.0024 0.0024 0.3548 0.3627 theta[16] 0.2269 0.2269 0.0024 0.0024 0.2230 0.2308 theta[17] 0.3094 0.3094 0.0028 0.0027 0.3048 0.3139 theta[18] 0.4035 0.4035 0.0028 0.0028 0.3988 0.4081 theta[19] 0.2192 0.2192 0.0024 0.0024 0.2150 0.2232 theta[20] 0.1597 0.1597 0.0021 0.0021 0.1564 0.1632 theta[21] 0.1614 0.1613 0.0021 0.0021 0.1580 0.1648 theta[22] 0.3345 0.3345 0.0025 0.0026 0.3303 0.3387 theta[23] 0.2215 0.2215 0.0025 0.0025 0.2174 0.2257 theta[24] 0.1883 0.1883 0.0020 0.0020 0.1852 0.1917 Para validar las cadenas mcmc_areas(model_Binomial2$draws(&quot;theta&quot;)) mcmc_trace(model_Binomial2$draws(&quot;theta&quot;)) y_pred_B &lt;- model_Binomial2$draws(variables = &quot;spred&quot;, format = &quot;matrix&quot;) rowsrandom &lt;- sample(nrow(y_pred_B), 200) y_pred2 &lt;- y_pred_B[rowsrandom, ] g1 &lt;- ggplot(data = dataS, aes(x = Sd))+ geom_histogram(aes(y = ..density..)) + geom_density(size = 2, color = &quot;blue&quot;) + labs(y = &quot;&quot;)+ theme_bw(20) g2 &lt;- ppc_dens_overlay(y = dataS$Sd, y_pred2) g1/g2 "],["modelo-normal-con-media-desconocida.html", "5.6 Modelo Normal con media desconocida", " 5.6 Modelo Normal con media desconocida Suponga que \\(Y_1,\\cdots,Y_n\\) son variables independientes e idénticamente distribuidos con distribución \\(Normal(\\theta,\\sigma^2)\\) con \\(\\theta\\) desconocido pero \\(\\sigma^2\\) conocido. De esta forma, la función de verosimilitud de los datos está dada por \\[ \\begin{align*} p(\\mathbf{Y} \\mid \\theta) &amp;=\\prod_{i=1}^n\\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\left\\{-\\frac{1}{2\\sigma^2}(y_i-\\theta)^2\\right\\}I_\\mathbb{R}(y) \\\\ &amp;=(2\\pi\\sigma^2)^{-n/2}\\exp\\left\\{-\\frac{1}{2\\sigma^2}\\sum_{i=1}^n(y_i-\\theta)^2\\right\\} \\end{align*} \\] Como el parámetro \\(\\theta\\) puede tomar cualquier valor en los reales, es posible asignarle una distribución previa \\(\\theta \\sim Normal(\\mu,\\tau^2)\\). Bajo este marco de referencia se tienen los siguientes resultados La distribución posterior del parámetro de interés \\(\\theta\\) sigue una distribución \\[ \\begin{equation*} \\theta|\\mathbf{Y} \\sim Normal(\\mu_n,\\tau^2_n) \\end{equation*} \\] En donde \\[ \\begin{equation} \\mu_n=\\frac{\\frac{n}{\\sigma^2}\\bar{Y}+\\frac{1}{\\tau^2}\\mu}{\\frac{n}{\\sigma^2}+\\frac{1}{\\tau^2}} \\ \\ \\ \\ \\ \\ \\ \\text{y} \\ \\ \\ \\ \\ \\ \\ \\tau_n^2=\\left(\\frac{n}{\\sigma^2}+\\frac{1}{\\tau^2}\\right)^{-1} \\end{equation} \\] 5.6.1 Práctica en STAN Sea \\(Y\\) el logaritmo del ingreso dataNormal &lt;- encuesta %&gt;% transmute( dam_ee , logIngreso = log(ingcorte +1)) %&gt;% filter(dam_ee == &quot;08&quot;) #3 media &lt;- mean(dataNormal$logIngreso) Sd &lt;- sd(dataNormal$logIngreso) g1 &lt;- ggplot(dataNormal,aes(x = logIngreso))+ geom_density(size =2, color = &quot;blue&quot;) + stat_function(fun =dnorm, args = list(mean = media, sd = Sd), size =2) + theme_bw(base_size = 20) + labs(y = &quot;&quot;, x = (&quot;Log(Ingreso)&quot;)) g2 &lt;- ggplot(dataNormal, aes(sample = logIngreso)) + stat_qq() + stat_qq_line() + theme_bw(base_size = 20) g1|g2 Figura 5.3: Resultado en la muestra (línea azul) y distribución teórica (línea negra) Creando código de STAN data { int&lt;lower=0&gt; n; // Número de observaciones real y[n]; // LogIngreso real &lt;lower=0&gt; Sigma; // Desviación estándar } parameters { real theta; } model { y ~ normal(theta, Sigma); theta ~ normal(0, 1000); // Distribución previa } generated quantities { real ypred[n]; // Vector de longitud n for(kk in 1:n){ ypred[kk] = normal_rng(theta,Sigma); } } Preparando el código de STAN # file.edit(&quot;Recursos/Día1/Sesion4/Data/modelosStan/4NormalMedia.stan&quot;) NormalMedia &lt;- cmdstan_model(stan_file = &quot;Recursos/Día1/Sesion4/Data/modelosStan/4NormalMedia.stan&quot;) Organizando datos para STAN sample_data &lt;- list(n = nrow(dataNormal), Sigma = sd(dataNormal$logIngreso), y = dataNormal$logIngreso) Para ejecutar STAN en R tenemos la librería cmdstanr model_NormalMedia &lt;- NormalMedia$sample(data = sample_data, chains = 4, parallel_chains = 4, seed = 1234, refresh = 1000 ) ## Running MCMC with 4 parallel chains... ## ## Chain 1 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 2 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 3 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 1 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 4 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 1 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 2 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 2 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 3 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 3 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 4 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 4 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 1 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 1 finished in 309.1 seconds. ## Chain 2 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 2 finished in 310.2 seconds. ## Chain 4 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 4 finished in 310.2 seconds. ## Chain 3 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 3 finished in 311.1 seconds. ## ## All 4 chains finished successfully. ## Mean chain execution time: 310.1 seconds. ## Total execution time: 312.5 seconds. La estimación del parámetro \\(\\theta\\) es: model_NormalMedia$summary(variables = &quot;theta&quot;)%&gt;% select(variable:q95) %&gt;% tba() variable mean median sd mad q5 q95 theta 13.1147 13.1148 0.0039 0.0039 13.1082 13.121 (mcmc_dens_chains(model_NormalMedia$draws(&quot;theta&quot;)) + mcmc_areas(model_NormalMedia$draws(&quot;theta&quot;)))/ mcmc_trace(model_NormalMedia$draws(&quot;theta&quot;)) y_pred_B &lt;- model_NormalMedia$draws(variables = &quot;ypred&quot;, format = &quot;matrix&quot;) rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, ] ppc_dens_overlay(y = as.numeric(dataNormal$logIngreso), y_pred2)/ ppc_dens_overlay(y = exp(as.numeric(dataNormal$logIngreso))-1, exp(y_pred2)-1) + xlim(0,5000000) "],["modelos-multiparamétricos.html", "Capítulo 6 Modelos multiparamétricos", " Capítulo 6 Modelos multiparamétricos La distribución normal univariada que tiene dos parámetros: la media \\(\\theta\\) y la varianza \\(\\sigma^2\\). La distribución multinomial cuyo parámetro es un vector de probabilidades \\(\\boldsymbol{\\theta}\\). "],["modelo-normal-con-media-y-varianza-desconocida.html", "6.1 Modelo Normal con media y varianza desconocida", " 6.1 Modelo Normal con media y varianza desconocida Supongamos que se dispone de realizaciones de un conjunto de variables independientes e idénticamente distribuidas \\(Y_1,\\cdots,Y_n\\sim N(\\theta,\\sigma^2)\\). Cuando se desconoce tanto la media como la varianza de la distribución es necesario plantear diversos enfoques y situarse en el más conveniente, según el contexto del problema. En términos de la asignación de las distribuciones previas para \\(\\theta\\) y \\(\\sigma^2\\) es posible: Suponer que la distribución previa \\(p(\\theta)\\) es independiente de la distribución previa \\(p(\\sigma^2)\\) y que ambas distribuciones son informativas. Suponer que la distribución previa \\(p(\\theta)\\) es independiente de la distribución previa \\(p(\\sigma^2)\\) y que ambas distribuciones son no informativas. Suponer que la distribución previa para \\(\\theta\\) depende de \\(\\sigma^2\\) y escribirla como \\(p(\\theta \\mid \\sigma^2)\\), mientras que la distribución previa de \\(\\sigma^2\\) no depende de \\(\\theta\\) y se puede escribir como \\(p(\\sigma^2)\\). "],["parámetros-independientes.html", "6.2 Parámetros independientes", " 6.2 Parámetros independientes La distribución previa para el parámetro \\(\\theta\\) será \\[ \\begin{equation*} \\theta \\sim Normal(\\mu,\\tau^2) \\end{equation*} \\] Y la distribución previa para el parámetro \\(\\sigma^2\\) será \\[ \\begin{equation*} \\sigma^2 \\sim Inversa-Gamma(n_0/2,n_0\\sigma^2_0/2) \\end{equation*} \\] Asumiendo independencia previa, la distribución previa conjunta estará dada por \\[ \\begin{equation} p(\\theta,\\sigma^2)\\propto (\\sigma^2)^{-n_0/2-1}\\exp\\left\\{-\\dfrac{n_0\\sigma^2_0}{2\\sigma^2}\\right\\} \\exp\\left\\{-\\frac{1}{2\\tau^2}(\\theta-\\mu)^2\\right\\} \\end{equation} \\] La distribución posterior conjunta de los parámetros de interés está dada por \\[ \\begin{align} p(\\theta,\\sigma^2 \\mid \\mathbf{Y})&amp;\\propto (\\sigma^2)^{-(n+n_0)/2-1} \\notag \\\\ &amp;\\times \\exp\\left\\{-\\frac{1}{2\\sigma^2}\\left[n_0\\sigma^2_0+(n-1)S^2+n(\\bar{y}-\\theta)^2\\right]-\\frac{1}{2\\tau^2}(\\theta-\\mu)^2\\right\\} \\end{align} \\] La distribución posterior condicional de \\(\\theta\\) es \\[ \\begin{equation} \\theta \\mid \\sigma^2,\\mathbf{Y} \\sim Normal(\\mu_n,\\tau_n^2) \\end{equation} \\] En donde las expresiones para \\(\\mu_n\\) y \\(\\tau_n^2\\) están dados previamente. Por otro lado, la distribución posterior condicional de \\(\\sigma^2\\) es \\[ \\begin{equation} \\sigma^2 \\mid \\theta,\\mathbf{Y} \\sim Inversa-Gamma\\left(\\dfrac{n_0+n}{2},\\dfrac{v_0}{2}\\right) \\end{equation} \\] con \\(v_0=n_0\\sigma^2_0+(n-1)S^2+n(\\bar{y}-\\theta)^2\\). 6.2.1 Práctica en STAN Sea \\(Y\\) el logaritmo del ingreso dataNormal &lt;- encuesta %&gt;% transmute(dam_ee, logIngreso = log(ingcorte +1)) %&gt;% filter(dam_ee == &quot;08&quot;) Creando código de STAN data { int&lt;lower=0&gt; n; real y[n]; } parameters { real sigma; real theta; } transformed parameters { real sigma2; sigma2 = pow(sigma, 2); } model { y ~ normal(theta, sigma); theta ~ normal(0, 1000); sigma2 ~ inv_gamma(0.001, 0.001); } generated quantities { real ypred[n]; // vector de longitud n for(kk in 1:n){ ypred[kk] = normal_rng(theta,sigma); } } Preparando el código de STAN # file.edit(&quot;Recursos/Día1/Sesion4/Data/modelosStan/5NormalMeanVar.stan&quot;) NormalMeanVar &lt;- cmdstan_model(stan_file = &quot;Recursos/Día1/Sesion4/Data/modelosStan/5NormalMeanVar.stan&quot;) Organizando datos para STAN sample_data &lt;- list(n = nrow(dataNormal), y = dataNormal$logIngreso) Para ejecutar STAN en R tenemos la librería cmdstanr model_NormalMedia &lt;- NormalMeanVar$sample(data = sample_data, chains = 4, parallel_chains = 4, seed = 1234, refresh = 1000) ## Running MCMC with 4 parallel chains... ## ## Chain 1 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 2 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 3 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 4 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 1 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 2 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 1 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 2 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 3 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 3 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 4 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 4 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 2 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 2 finished in 286.2 seconds. ## Chain 1 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 1 finished in 286.9 seconds. ## Chain 4 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 4 finished in 286.4 seconds. ## Chain 3 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 3 finished in 288.6 seconds. ## ## All 4 chains finished successfully. ## Mean chain execution time: 287.0 seconds. ## Total execution time: 289.8 seconds. La estimación del parámetro \\(\\theta\\) y \\(\\sigma^2\\) es: model_NormalMedia$summary(variables = c(&quot;theta&quot;, &quot;sigma2&quot;, &quot;sigma&quot;)) %&gt;% select(variable:q95) %&gt;% tba() variable mean median sd mad q5 q95 theta 13.1147 13.1147 0.0040 0.0040 13.1082 13.1212 sigma2 0.6987 0.6988 0.0047 0.0047 0.6910 0.7063 sigma 0.8359 0.8359 0.0028 0.0028 0.8313 0.8404 (mcmc_dens_chains(model_NormalMedia$draws(&quot;theta&quot;)) + mcmc_areas(model_NormalMedia$draws(&quot;theta&quot;)))/ mcmc_trace(model_NormalMedia$draws(&quot;theta&quot;)) (mcmc_dens_chains(model_NormalMedia$draws(&quot;sigma2&quot;)) + mcmc_areas(model_NormalMedia$draws(&quot;sigma2&quot;)))/ mcmc_trace(model_NormalMedia$draws(&quot;sigma2&quot;)) (mcmc_dens_chains(model_NormalMedia$draws(&quot;sigma&quot;)) + mcmc_areas(model_NormalMedia$draws(&quot;sigma&quot;)))/ mcmc_trace(model_NormalMedia$draws(&quot;sigma&quot;)) y_pred_B &lt;- model_NormalMedia$draws(variables = &quot;ypred&quot;, format = &quot;matrix&quot;) rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, ] ppc_dens_overlay(y = as.numeric(exp(dataNormal$logIngreso)-1), y_pred2) + xlim(0,5000000) "],["modelo-multinomial.html", "6.3 Modelo Multinomial", " 6.3 Modelo Multinomial En esta sección discutimos el modelamiento bayesiano de datos provenientes de una distribución multinomial que corresponde a una extensión multivariada de la distribución binomial. Suponga que \\(\\textbf{Y}=(Y_1,\\ldots,Y_p)&#39;\\) es un vector aleatorio con distribución multinomial, así, su distribución está parametrizada por el vector \\(\\boldsymbol{\\theta}=(\\theta_1,\\ldots,\\theta_p)&#39;\\) y está dada por la siguiente expresión \\[ \\begin{equation} p(\\mathbf{Y} \\mid \\boldsymbol{\\theta})=\\binom{n}{y_1,\\ldots,y_p}\\prod_{i=1}^p\\theta_i^{y_i} \\ \\ \\ \\ \\ \\theta_i&gt;0 \\texttt{ , } \\sum_{i=1}^py_i=n \\texttt{ y } \\sum_{i=1}^p\\theta_i=1 \\end{equation} \\] Donde \\[ \\begin{equation*} \\binom{n}{y_1,\\ldots,y_p}=\\frac{n!}{y_1!\\cdots y_p!}. \\end{equation*} \\] Como cada parámetro \\(\\theta_i\\) está restringido al espacio \\(\\Theta=[0,1]\\), entonces es posible asignar a la distribución de Dirichlet como la distribución previa del vector de parámetros. Por lo tanto la distribución previa del vector de parámetros \\(\\boldsymbol{\\theta}\\), parametrizada por el vector de hiperparámetros \\(\\boldsymbol{\\alpha}=(\\alpha_1,\\ldots,\\alpha_p)&#39;\\), está dada por \\[ \\begin{equation} p(\\boldsymbol{\\theta} \\mid \\boldsymbol{\\alpha})=\\frac{\\Gamma(\\alpha_1+\\cdots+\\alpha_p)}{\\Gamma(\\alpha_1)\\cdots\\Gamma(\\alpha_p)} \\prod_{i=1}^p\\theta_i^{\\alpha_i-1} \\ \\ \\ \\ \\ \\alpha_i&gt;0 \\texttt{ y } \\sum_{i=1}^p\\theta_i=1 \\end{equation} \\] La distribución posterior del parámetro \\(\\boldsymbol{\\theta}\\) sigue una distribución \\(Dirichlet(y_1+\\alpha_1,\\ldots,y_p+\\alpha_p)\\) 6.3.1 Práctica en STAN Sea \\(Y\\) condición de actividad laboral dataMult &lt;- encuesta %&gt;% filter(condact3 %in% 1:3) %&gt;% transmute( empleo = as_factor(condact3)) %&gt;% group_by(empleo) %&gt;% tally() %&gt;% mutate(theta = n/sum(n)) tba(dataMult) empleo n theta 1 348015 0.5537 2 42045 0.0669 3 238426 0.3794 donde 1 corresponde a Ocupado, 2 son los Desocupado y 3 son Inactivo Creando código de STAN data { int&lt;lower=0&gt; k; // Número de cátegoria int y[k]; // Número de exitos vector[k] alpha; // Parámetro de las distribción previa } parameters { simplex[k] theta; } transformed parameters { real delta; // Tasa de desocupación delta = theta[2]/ (theta[2] + theta[1]); // (Desocupado)/(Desocupado + Ocupado) } model { y ~ multinomial(theta); theta ~ dirichlet(alpha); } generated quantities { int ypred[k]; ypred = multinomial_rng(theta, sum(y)); } Preparando el código de STAN # file.edit(&quot;Recursos/Día1/Sesion4/Data/modelosStan/6Multinom.stan&quot;) Multinom &lt;- cmdstan_model(stan_file = &quot;Recursos/Día1/Sesion4/Data/modelosStan/6Multinom.stan&quot;) Organizando datos para STAN sample_data &lt;- list(k = nrow(dataMult), y = dataMult$n, alpha = c(0.5, 0.5, 0.5)) Para ejecutar STAN en R tenemos la librería cmdstanr model_Multinom &lt;- Multinom$sample(data = sample_data, chains = 4, parallel_chains = 4, seed = 1234, refresh = 1000) ## Running MCMC with 4 parallel chains... ## ## Chain 1 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 1 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 1 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 1 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 2 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 2 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 2 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 2 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 3 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 3 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 3 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 3 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 4 Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 4 Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 4 Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 4 Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 1 finished in 0.3 seconds. ## Chain 2 finished in 0.3 seconds. ## Chain 3 finished in 0.3 seconds. ## Chain 4 finished in 0.3 seconds. ## ## All 4 chains finished successfully. ## Mean chain execution time: 0.3 seconds. ## Total execution time: 1.7 seconds. La estimación del parámetro \\(\\theta\\) y \\(\\delta\\) es: model_Multinom$summary(variables = c(&quot;delta&quot;, &quot;theta&quot;))%&gt;% select(variable:q95) %&gt;% tba() variable mean median sd mad q5 q95 delta 0.1078 0.1078 5e-04 5e-04 0.1070 0.1086 theta[1] 0.5537 0.5537 6e-04 7e-04 0.5527 0.5548 theta[2] 0.0669 0.0669 3e-04 3e-04 0.0664 0.0674 theta[3] 0.3794 0.3794 6e-04 6e-04 0.3783 0.3804 (mcmc_dens_chains(model_Multinom$draws(&quot;theta[1]&quot;)) + mcmc_areas(model_Multinom$draws(&quot;theta[1]&quot;)))/ mcmc_trace(model_Multinom$draws(&quot;theta[1]&quot;)) (mcmc_dens_chains(model_Multinom$draws(&quot;theta[2]&quot;)) + mcmc_areas(model_Multinom$draws(&quot;theta[2]&quot;)))/ mcmc_trace(model_Multinom$draws(&quot;theta[2]&quot;)) (mcmc_dens_chains(model_Multinom$draws(&quot;theta[3]&quot;)) + mcmc_areas(model_Multinom$draws(&quot;theta[3]&quot;)))/ mcmc_trace(model_Multinom$draws(&quot;theta[3]&quot;)) (mcmc_dens_chains(model_Multinom$draws(&quot;delta&quot;)) + mcmc_areas(model_Multinom$draws(&quot;delta&quot;)))/ mcmc_trace(model_Multinom$draws(&quot;delta&quot;)) n &lt;- nrow(dataMult) y_pred_B &lt;- model_Multinom$draws(variables = &quot;ypred&quot;, format = &quot;matrix&quot;) rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[, 1:n] ppc_dens_overlay(y = as.numeric(dataMult$n), y_pred2) "],["función-generalizada-de-varianza-fgv.html", "Capítulo 7 Función Generalizada de Varianza (FGV)", " Capítulo 7 Función Generalizada de Varianza (FGV) Uno de los insumos más importantes en el modelo de áreas es la varianza del estimador directo, a nivel de dominio, la cual no puede calcularse de ningún modo. En correspondencia, este valor debe estimarse desde los datos recolectados en cada dominio. Sin embargo, en dominios en las que se cuenta con un tamaño de muestra muy pequeño, estas estimaciones no tendrán un buen comportamiento. Por ende, es muy útil utilizar un modelo de suavizamiento de las varianzas para eliminar el ruido y la volatilidad de estas estimaciones y extraer la verdadera señal del proceso Hidiroglou (2019) afirma que \\(E_{mp}\\left(\\hat{\\theta}^{dir}_d\\right)=\\boldsymbol{x}_{d}\\boldsymbol{\\beta}\\) y \\(V_{mp}\\left(\\hat{\\theta}^{dir}_d\\right)=\\sigma_{u}^2+\\tilde{\\psi}^2_{d}\\), en donde el subíndice \\(mp\\) hace referencia a la inferencia doble que se debe tener en cuenta en este tipo de ajustes y define la medida de probabilidad conjunta entre el modelo y el diseño de muestreo. \\(m\\) hace referencia a la medida de probabilidad inducida por el modelamiento y la inclusión de las covariables auxiliares (\\(\\boldsymbol{x}_{d}\\)). \\(p\\) hacer referencia a la medida de probabilidad inducida por el diseño de muestreo complejo que induce las estimaciones directas. La solución que acá se plantea se conoce con el nombre de Función Generalizada de Varianza, la cual consiste en ajustar un modelo log-lineal a la varianza directa estimada. Partiendo del hecho de que se tiene acceso a un estimador insesgado de \\(\\psi^2\\), denotado por \\(\\hat{\\psi}^2\\) se tiene que: \\[ E_{mp}\\left(\\hat{\\psi}_{d}^{2}\\right)=E_{m}\\left(E_{p}\\left(\\psi_{d}^{2}\\right)\\right)=E_{m}\\left(\\psi_{d}^{2}\\right)=\\tilde{\\psi}_{d}^{2} \\] La anterior igualdad puede interpretarse como que un estimador insesgado y simple de \\(\\tilde{\\psi}_{d}^{2}\\) puede ser \\(\\hat{\\psi}_{d}^{2}\\). Sin embargo, este estimador de muestreo es inestable cuando el tamaño de muestra es pequeño, que es justo el paradigma dominante en la estimación de áreas pequeñas. Rivest and Belmonte (2000) consideran modelos de suavizamiento para la estimación de las varianzas directas definidos de la siguiente manera: \\[ \\log\\left(\\hat{\\psi}_{d}^{2}\\right)=\\boldsymbol{z}_{d}^{t}\\boldsymbol{\\alpha}+\\boldsymbol{\\varepsilon}_{d} \\] En donde \\(\\boldsymbol{z}_{d}\\) es un vector de covariables explicativas que son funciones de \\(\\boldsymbol{x}_{d}\\), \\(\\boldsymbol{\\alpha}\\) es un vector de parámetros que deben ser estimados, \\(\\boldsymbol{\\varepsilon}_{d}\\) son errores aleatorios con media cero y varianza constante, que se asumen idénticamente distribuidos condicionalmente sobre \\(\\boldsymbol{z}_{d}\\). Del anterior modelo, la estimación suavizada de la varianza de muestreo está dada por: \\[ \\tilde{\\psi}_{d}^{2}=E_{mp}\\left(\\psi_{d}^{2}\\right)=\\exp\\left(\\boldsymbol{z}_{d}^{t}\\boldsymbol{\\alpha}\\right)\\times\\Delta \\] En donde, \\(E_{mp}\\left(\\varepsilon_{d}\\right)=\\Delta\\). No hay necesidad de especificar una distribución paramétrica para los errores de este modelo. Al utilizar el método de los momentos, se tiene el siguiente estimador insesgado para \\(\\Delta\\): \\[ \\hat{\\Delta}=\\frac{\\sum_{d=1}^{D}\\hat{\\psi}_{d}^{2}}{\\sum_{d=1}^{D}\\exp\\left(\\boldsymbol{z}_{d}^{t}\\boldsymbol{\\alpha}\\right)} \\] De la misma forma, al utilizar los procedimientos estándar en una regresión lineal, la estimación del coeficiente de parámetros de regresión está dada por la siguiente expresión: \\[ \\hat{\\boldsymbol{\\alpha}}=\\left(\\sum_{d=1}^{D}\\boldsymbol{z}_{d}\\boldsymbol{z}_{d}^{t}\\right)^{-1}\\sum_{d=1}^{D}\\boldsymbol{z}_{d}\\log\\left(\\hat{\\psi}_{d}^{2}\\right) \\] Por último, el estimador suavizado de la varianza muestral está definido por: \\[ \\hat{\\tilde{\\psi}}_{d}^{2}=\\exp\\left(\\boldsymbol{z}_{d}^{t}\\hat{\\boldsymbol{\\alpha}}\\right)\\hat{\\Delta} \\] "],["datos-de-la-encuesta.html", "7.1 Datos de la encuesta", " 7.1 Datos de la encuesta library(tidyverse) library(magrittr) source(&quot;Recursos/Día2/Sesion1/0Recursos/0Source_FH.R&quot;) encuesta &lt;- readRDS(&quot;Recursos/Día2/Sesion1/Data/encuestaCOL18N1.rds&quot;) %&gt;% transmute( dam = dam_ee, dam2, wkx = `_fep`, upm = segmento, estrato = paste0(dam, haven::as_factor(area_ee,levels = &quot;values&quot;)), pobreza = ifelse(ingcorte &lt; lp, 1 , 0)) dam: Corresponde al código asignado a la división administrativa mayor del país. dam2: Corresponde al código asignado a la segunda división administrativa del país. lp linea de pobreza definida por CEPAL. Factor de expansión por persona (fep) dam dam2 wkx upm estrato pobreza 05 05360 127.2220 010126005360 051 0 05 05360 127.2220 010126005360 051 0 05 05360 127.2220 010126005360 051 0 05 05360 127.2220 010126005360 051 0 05 05360 127.2220 010126005360 051 0 05 05360 125.7202 010126005360 051 1 05 05360 125.7202 010126005360 051 1 05 05360 125.7202 010126005360 051 1 05 05360 125.7202 010126005360 051 1 05 05360 115.8661 010126005360 051 1 Definir el diseño muestral haciendo uso de las librerías srvyr y survey library(survey) library(srvyr) options(survey.lonely.psu = &quot;adjust&quot;) diseno &lt;- as_survey_design( ids = upm, weights = wkx, strata = estrato, nest = TRUE, .data = encuesta ) summary(diseno) ## Stratified 1 - level Cluster Sampling design (with replacement) ## With (21869) clusters. ## Called via srvyr ## Probabilities: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.001089 0.012313 0.037623 0.057119 0.080947 0.783027 ## Stratum Sizes: ## 051 052 081 082 111 112 131 132 151 152 171 172 ## obs 41761 3706 43299 1022 32177 36 32757 2853 23299 3186 27959 2805 ## design.PSU 1247 123 926 29 972 1 828 83 762 131 905 101 ## actual.PSU 1247 123 926 29 972 1 828 83 762 131 905 101 ## 181 182 191 192 201 202 231 232 251 252 271 272 ## obs 23698 5144 28826 5531 30225 2229 29181 2805 6271 2797 22812 4016 ## design.PSU 760 130 852 180 832 81 650 83 181 106 699 140 ## actual.PSU 760 130 852 180 832 81 650 83 181 106 699 140 ## 411 412 441 442 471 472 501 502 521 522 541 542 ## obs 27446 3282 32062 3556 34690 2944 26381 2936 24656 4271 27554 3830 ## design.PSU 866 105 790 120 889 84 803 96 734 131 793 134 ## actual.PSU 866 105 790 120 889 84 803 96 734 131 793 134 ## 631 632 661 662 681 682 701 702 731 732 761 762 ## obs 26616 1660 25945 3254 28390 3388 32471 3054 25315 3101 35065 2491 ## design.PSU 864 55 818 103 749 108 737 96 788 91 1027 86 ## actual.PSU 864 55 818 103 749 108 737 96 788 91 1027 86 ## Data variables: ## [1] &quot;dam&quot; &quot;dam2&quot; &quot;wkx&quot; &quot;upm&quot; &quot;estrato&quot; &quot;pobreza&quot; Para la estimación directa de la proporción se emplea la función direct.supr, disponible en el archivo 0Source_FH.R, dando como resultado. directodam2 &lt;- direct.supr(design.base = diseno, variable = pobreza, group = dam2, upm = upm, estrato = estrato) directodam2 %&gt;% group_by(Flag) %&gt;% summarise(n = n()) %&gt;% arrange(n) %&gt;% tba() Flag n Excluir 59 Incluir 379 Para los dominios que no son excluidos se hace la transformación arcoseno, calculo del DEFF y varianza base_sae &lt;- directodam2 %&gt;% filter(Flag != &quot;Excluir&quot;) %&gt;% transmute( dam2 = dam2, # Id para los dominios nd = n, # Número de observaciones por dominios n_effec = n.eff, # n efectivo. pobreza = p, # Estimación de la variable pobreza_T = asin(sqrt(pobreza)), # Transformación arcoseno vardir = ee ^ 2, # Estimación de la varianza directa cv = CV, var_zd = 1 / (4 * n_effec), # Varianza para la tranformación arcsin deff_dam2 = deff # Deff por dominio ) # View(base_sae) tba(head(base_sae)) dam2 nd n_effec pobreza pobreza_T vardir cv var_zd deff_dam2 05001 27432 1914.8077 0.1597 0.4111 0.0000 4.1932 0.0001 14.3262 05002 257 21.3006 0.4049 0.6897 0.0032 14.0276 0.0117 12.0654 05031 199 7.8051 0.3817 0.6660 0.0042 17.0554 0.0320 25.4963 05034 223 25.8934 0.4731 0.7585 0.0018 8.8997 0.0097 8.6122 05045 480 5.0044 0.2876 0.5661 0.0064 27.9009 0.0500 95.9148 05079 191 22.5008 0.4001 0.6848 0.0063 19.8514 0.0111 8.4886 Seleccionando las variables de interés para la FGV. baseFGV &lt;- base_sae %&gt;% select(dam2, pobreza, nd, vardir) %&gt;% mutate(ln_sigma2 = log(vardir)) "],["análisis-gráfico.html", "Capítulo 8 Análisis gráfico", " Capítulo 8 Análisis gráfico theme_set(theme_bw()) # pobreza vs Ln_sigma2 # p1 &lt;- ggplot(baseFGV, aes(x = pobreza, y = ln_sigma2)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + xlab(&quot;pobreza&quot;) # Tamaño de muestra vs Ln_sigma2 # p2 &lt;- ggplot(baseFGV, aes(x = nd, y = ln_sigma2)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + xlab(&quot;Tamaño de muestra&quot;) # Número de pobres vs Ln_sigma2 # p3 &lt;- ggplot(baseFGV, aes(x = pobreza * nd, y = ln_sigma2)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + xlab(&quot;Número de pobres&quot;) # Raiz_pobreza vs Ln_sigma2 # p4 &lt;- ggplot(baseFGV, aes(x = sqrt(pobreza), y = ln_sigma2)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + xlab(&quot;Raiz cuadrada de pobreza&quot;) library(patchwork) (p1 | p2) / (p3 | p4) "],["modelo-para-la-varianza.html", "Capítulo 9 Modelo para la varianza", " Capítulo 9 Modelo para la varianza library(gtsummary) FGV1 &lt;- lm(ln_sigma2 ~ pobreza + I(nd^2) + I(sqrt(pobreza)), data = baseFGV) tbl_regression(FGV1) %&gt;% add_glance_table(include = c(r.squared, adj.r.squared)) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #sdqtqlgnch .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #sdqtqlgnch .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #sdqtqlgnch .gt_caption { padding-top: 4px; padding-bottom: 4px; } #sdqtqlgnch .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #sdqtqlgnch .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #sdqtqlgnch .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #sdqtqlgnch .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #sdqtqlgnch .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #sdqtqlgnch .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #sdqtqlgnch .gt_column_spanner_outer:first-child { padding-left: 0; } #sdqtqlgnch .gt_column_spanner_outer:last-child { padding-right: 0; } #sdqtqlgnch .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #sdqtqlgnch .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #sdqtqlgnch .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #sdqtqlgnch .gt_from_md > :first-child { margin-top: 0; } #sdqtqlgnch .gt_from_md > :last-child { margin-bottom: 0; } #sdqtqlgnch .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #sdqtqlgnch .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #sdqtqlgnch .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #sdqtqlgnch .gt_row_group_first td { border-top-width: 2px; } #sdqtqlgnch .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #sdqtqlgnch .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #sdqtqlgnch .gt_first_summary_row.thick { border-top-width: 2px; } #sdqtqlgnch .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #sdqtqlgnch .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #sdqtqlgnch .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #sdqtqlgnch .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #sdqtqlgnch .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #sdqtqlgnch .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #sdqtqlgnch .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #sdqtqlgnch .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #sdqtqlgnch .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #sdqtqlgnch .gt_left { text-align: left; } #sdqtqlgnch .gt_center { text-align: center; } #sdqtqlgnch .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #sdqtqlgnch .gt_font_normal { font-weight: normal; } #sdqtqlgnch .gt_font_bold { font-weight: bold; } #sdqtqlgnch .gt_font_italic { font-style: italic; } #sdqtqlgnch .gt_super { font-size: 65%; } #sdqtqlgnch .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #sdqtqlgnch .gt_asterisk { font-size: 100%; vertical-align: 0; } #sdqtqlgnch .gt_indent_1 { text-indent: 5px; } #sdqtqlgnch .gt_indent_2 { text-indent: 10px; } #sdqtqlgnch .gt_indent_3 { text-indent: 15px; } #sdqtqlgnch .gt_indent_4 { text-indent: 20px; } #sdqtqlgnch .gt_indent_5 { text-indent: 25px; } Characteristic Beta 95% CI1 p-value pobreza -12 -14, -9.5 I(nd^2) 0.00 0.00, 0.00 I(sqrt(pobreza)) 16 14, 19 R² 0.608 Adjusted R² 0.604 1 CI = Confidence Interval Ponderador FGV delta.hat = sum(baseFGV$vardir) / sum(exp(fitted.values(FGV1))) delta.hat ## [1] 1.303171 Varianza suavizada para los dominios observados hat.sigma &lt;- data.frame(dam2 = baseFGV$dam2, hat_var = delta.hat * exp(fitted.values(FGV1))) baseFGV &lt;- left_join(baseFGV, hat.sigma) tba(head(baseFGV, 10)) dam2 pobreza nd vardir ln_sigma2 hat_var 05001 0.1597 27432 0.0000 -10.0123 0.0001 05002 0.4049 257 0.0032 -5.7366 0.0060 05031 0.3817 199 0.0042 -5.4635 0.0058 05034 0.4731 223 0.0018 -6.3351 0.0062 05045 0.2876 480 0.0064 -5.0451 0.0047 05079 0.4001 191 0.0063 -5.0660 0.0060 05088 0.1314 4457 0.0002 -8.5360 0.0016 05093 0.3273 168 0.0063 -5.0724 0.0052 05120 0.7049 180 0.0061 -5.0921 0.0048 05129 0.1140 554 0.0014 -6.5515 0.0014 Validación del modelo para la FGV par(mfrow = c(2, 2)) plot(FGV1) Comparación entre varianza estimada con pronosticada por la FGV ggplot(baseFGV , aes(y = vardir, x = hat_var)) + geom_point() + geom_smooth(method = &quot;loess&quot;) Predicción de la varianza suavizada base_sae &lt;- base_sae %&gt;% left_join(hat.sigma, by = &quot;dam2&quot;) Organizando la información para exportar, realizamos validaciones adicionales sobre el deff base_FH &lt;- base_sae %&gt;% mutate( deff_dam2 = ifelse(is.nan(deff_dam2), 1, deff_dam2), deff_FGV = ifelse( vardir == 0 , 1, hat_var / (vardir / deff_dam2) ), # Criterio MDS para regularizar el DeffFGV deff_FGV = ifelse(deff_FGV &lt; 1, 1, deff_FGV), n_eff_FGV = nd / deff_FGV ) saveRDS(object = base_FH, &quot;Recursos/Día2/Sesion1/Data/base_FH_2018.rds&quot;) "],["análisis-gráfico-1.html", "Capítulo 10 Análisis gráfico", " Capítulo 10 Análisis gráfico ggplot(base_FH %&gt;% arrange(nd), aes(x = hat_var, y = vardir)) + geom_point() + geom_smooth(method = &quot;lm&quot;, col = 2) + labs(x = &quot;FGV&quot;, y = &quot;VarDirEst&quot;) + ylab(&quot;Varianza del Estimador Directo&quot;) "],["modelo-de-fay-herriot-respuesta-normal..html", "Capítulo 11 Modelo de Fay Herriot respuesta normal.", " Capítulo 11 Modelo de Fay Herriot respuesta normal. El modelo de Fay Herriot FH, propuesto por Fay y Herriot (1979), es un modelo estadístico de área y es el más comúnmente utilizado, cabe tener en cuenta, que dentro de la metodología de estimación en áreas pequeñas, los modelos de área son los de mayor aplicación, ya que lo más factible es no contar con la información a nivel de individuo, pero si encontrar no solo los datos a nivel de área, sino también información auxiliar asociada a estos datos. Este modelo lineal mixto, fue el primero en incluir efectos aleatorios a nivel de área, lo que implica que la mayoría de la información que se introduce al modelo corresponde a agregaciaciones usualmente, departamentos, regiones, provincias, municipios entre otros, donde las estimaciones que se logran con el modelo se obtienen sobre estas agregaciones o subpoblaciones. El modelo FH enlaza indicadores de las áreas \\(\\delta_d\\), \\(d = 1, \\cdots , D\\), asumiendo que varían respeto a un vector de \\(p\\) covariables, \\(\\boldsymbol{x}_d\\) , de forma constante. El modelo esta dado por la ecuación \\[ \\delta_d = \\boldsymbol{x^T}_d\\boldsymbol{\\beta} + u_d ,\\ \\ \\ \\ \\ d = 1, \\cdots , D \\] \\(u_d\\) es el término de error, o el efecto aleatorio, diferente para cada área dado por \\[ \\begin{eqnarray*} u_{d} &amp; \\stackrel{iid}{\\sim} &amp; \\left(0,\\sigma_{u}^{2}\\right) \\end{eqnarray*} \\] Sin embargo, los verdaderos valores de los indicadores \\(\\delta_d\\) no son observables. Entonces, usamos el estimador directo \\(\\hat{\\delta}^{DIR}_d\\) para \\(\\delta_d\\) , lo que conlleva un error debido al muestro. \\(\\hat{\\delta}^{DIR}_d\\) todavía se considera insesgado bajo el diseño muestral. Podemos definir, entonces, \\[ \\hat{\\delta}^{DIR}_d = \\delta_d + e_d, \\ \\ \\ \\ \\ \\ d = 1, \\cdots , D \\] donde \\(e_d\\) es el error debido al muestreo, \\(e_{d} \\stackrel{ind}{\\sim} \\left(0,\\psi\\right)\\) Dichas varianzas \\(\\psi_d = var_{\\pi}\\left(\\hat{\\delta}^{DIR}_d\\mid\\delta_d\\right)\\), \\(d = 1,\\cdots,D\\) se estiman con los microdatos de la encuesta. Por tanto, el modelo se hace, \\[ \\hat{\\delta}^{DIR}_d = \\boldsymbol{x^T}_d\\boldsymbol{\\beta} + u_d + e_d, \\ \\ \\ \\ \\ \\ d = 1, \\cdots , D \\] El BLUP (best linear unbiased predictor) bajo el modelo FH de \\(\\delta_d\\) viene dado por \\[ \\begin{eqnarray*} \\tilde{\\delta}_{d}^{FH} &amp; = &amp; \\boldsymbol{x_d}^{T}\\tilde{\\boldsymbol{\\beta}}+\\tilde{u}_{d} \\end{eqnarray*} \\] Si sustituimos \\(\\tilde{u}_d = \\gamma_d\\left(\\hat{\\delta}^{DIR}_d - \\boldsymbol{x_d}^{T}\\tilde{\\boldsymbol{\\beta}} \\right)\\) en el BLUP bajo el modelo FH, obtenemos \\[ \\begin{eqnarray*} \\tilde{\\delta}_{d}^{FH} &amp; = &amp; \\gamma_d\\hat{\\delta}^{DIR}_{d}+(1-\\gamma_d)\\boldsymbol{x_d}^{T}\\tilde{\\boldsymbol{\\beta}} \\end{eqnarray*} \\] siendo \\(\\gamma_d=\\frac{\\sigma^2_u}{\\sigma^2_u + \\psi_d}\\). Habitualmente, no sabemos el verdadero valor de \\(\\sigma^2_u\\) efectos aleatorios \\(u_d\\). Sea \\(\\hat{\\sigma}^2_u\\) un estimador consistente para \\(\\sigma^2_u\\). Entonces, obtenemos el BLUP empírico (empirical BLUP, EBLUP) de \\(\\delta_d\\) , \\[ \\begin{eqnarray*} \\tilde{\\delta}_{d}^{FH} &amp; = &amp; \\hat{\\gamma_d}\\hat{\\delta}^{DIR}_{d}+(1-\\hat{\\gamma_d})\\boldsymbol{x_d}^{T}\\hat{\\boldsymbol{\\beta}} \\end{eqnarray*} \\] donde \\(\\hat{\\gamma_d}=\\frac{\\hat{\\sigma}^2_u}{\\hat{\\sigma}^2_u + \\psi_d}\\). \\[ \\begin{eqnarray*} Y\\mid\\mu,\\sigma_{e} &amp; \\sim &amp; N\\left(\\mu,\\sigma_{e}\\right)\\\\ \\mu &amp; = &amp; \\boldsymbol{X\\beta}+V \\end{eqnarray*} \\] donde \\(V \\sim N(0 , \\sigma_v)\\). Las distribuciones previas para \\(\\boldsymbol{\\beta}\\) y \\(\\sigma^2_v\\) \\[ \\begin{eqnarray*} \\beta_k &amp; \\sim &amp; N(\\mu_0, \\tau^2_0)\\\\ \\sigma^2_v &amp;\\sim &amp; IG(\\alpha_1,\\alpha_2) \\end{eqnarray*} \\] "],["procesamiento-en-r.html", "11.1 Procesamiento en R", " 11.1 Procesamiento en R Lectura de la base de datos que resultó en el paso anterior y selección de las columnas de interés library(tidyverse) library(magrittr) base_FH &lt;- readRDS(&quot;Recursos/Día2/Sesion2/Data/base_FH_2018.rds&quot;) %&gt;% select(dam2, nd, pobreza, vardir, hat_var) Lectura de las covariables, las cuales son obtenidas previamente. Dado la diferencia entre las escalas de las variables es necesario hacer un ajuste a estas. statelevel_predictors_df &lt;- readRDS(&quot;Recursos/Día2/Sesion2/Data/statelevel_predictors_df_dam2.rds&quot;) %&gt;% mutate_at(.vars = c(&quot;luces_nocturnas&quot;, &quot;cubrimiento_cultivo&quot;, &quot;cubrimiento_urbano&quot;, &quot;modificacion_humana&quot;, &quot;accesibilidad_hospitales&quot;, &quot;accesibilidad_hosp_caminado&quot;), function(x) as.numeric(scale(x))) Uniendo las dos bases de datos. base_FH &lt;- full_join(base_FH, statelevel_predictors_df, by = &quot;dam2&quot; ) tba(base_FH[1:10,1:8]) dam2 nd pobreza vardir hat_var dam area1 sexo2 05001 27432 0.1597 0.0000 0.0001 05 0.9832 0.5299 05002 257 0.4049 0.0032 0.0060 05 0.3953 0.4807 05031 199 0.3817 0.0042 0.0058 05 0.5766 0.4978 05034 223 0.4731 0.0018 0.0062 05 0.5029 0.4815 05045 480 0.2876 0.0064 0.0047 05 0.8091 0.5078 05079 191 0.4001 0.0063 0.0060 05 0.4821 0.5038 05088 4457 0.1314 0.0002 0.0016 05 0.9569 0.5186 05093 168 0.3273 0.0063 0.0052 05 0.2776 0.4862 05120 180 0.7049 0.0061 0.0048 05 0.1989 0.4787 05129 554 0.1140 0.0014 0.0014 05 0.8065 0.5202 # View(base_FH) "],["preparando-los-insumos-para-stan.html", "Capítulo 12 Preparando los insumos para STAN", " Capítulo 12 Preparando los insumos para STAN Dividir la base de datos en dominios observados y no observados 12.0.1 Dominios observados. data_dir &lt;- base_FH %&gt;% filter(!is.na(pobreza)) 12.0.2 Dominios NO observados. data_syn &lt;- base_FH %&gt;% anti_join(data_dir %&gt;% select(dam2)) tba(data_syn[1:10,1:8]) dam2 nd pobreza vardir hat_var dam area1 sexo2 05004 NA NA NA NA 05 0.3279 0.4576 05021 NA NA NA NA 05 0.5770 0.5020 05030 NA NA NA NA 05 0.4859 0.5063 05036 NA NA NA NA 05 0.3931 0.4951 05038 NA NA NA NA 05 0.2256 0.4927 05040 NA NA NA NA 05 0.4858 0.4826 05042 NA NA NA NA 05 0.6688 0.5031 05044 NA NA NA NA 05 0.1847 0.4828 05051 NA NA NA NA 05 0.3660 0.4970 05055 NA NA NA NA 05 0.4431 0.4825 12.0.3 Matrix de covariables (Efectos fijos) formula_mod &lt;- formula(~ sexo2 + anoest2 + anoest3 + anoest4 + edad2 + edad3 + edad4 + edad5 + etnia1 + etnia2 + tasa_desocupacion + luces_nocturnas + cubrimiento_cultivo + alfabeta) ## Dominios observados Xdat &lt;- model.matrix(formula_mod, data = data_dir) ## Dominios no observados Xs &lt;- model.matrix(formula_mod, data = data_syn) Para realizar la predicción del modelo es necesario validar que \\(X\\) y \\(Xs\\) deben tener la mismas columnas en el mismo orden. temp &lt;- setdiff(colnames(Xdat),colnames(Xs)) temp &lt;- matrix( 0, nrow = nrow(Xs), ncol = length(temp), dimnames = list(1:nrow(Xs), temp) ) Xs &lt;- cbind(Xs,temp)[,colnames(Xdat)] Creando lista de parámetros para STAN sample_data &lt;- list( N1 = nrow(Xdat), # Observados. N2 = nrow(Xs), # NO Observados. p = ncol(Xdat), # Número de regresores. X = as.matrix(Xdat), # Covariables Observados. Xs = as.matrix(Xs), # Covariables NO Observados y = as.numeric(data_dir$pobreza), # Estimación directa sigma_e = sqrt(data_dir$hat_var) # Error de estimación ) Rutina implementada en STAN data { int&lt;lower=0&gt; N1; // number of data items int&lt;lower=0&gt; N2; // number of data items for prediction int&lt;lower=0&gt; p; // number of predictors matrix[N1, p] X; // predictor matrix matrix[N2, p] Xs; // predictor matrix vector[N1] y; // predictor matrix vector[N1] sigma_e; // known variances } // The parameters accepted by the model. Our model // accepts two parameters &#39;mu&#39; and &#39;sigma&#39;. parameters { vector[p] beta; // coefficients for predictors real&lt;lower=0&gt; sigma2_v; vector[N1] v; } transformed parameters{ vector[N1] theta; vector[N1] thetaSyn; vector[N1] thetaFH; vector[N1] gammaj; real&lt;lower=0&gt; sigma_v; thetaSyn = X * beta; theta = thetaSyn + v; sigma_v = sqrt(sigma2_v); gammaj = to_vector(sigma_v ./ (sigma_v + sigma_e)); thetaFH = (gammaj) .* y + (1-gammaj).*thetaSyn; } model { // likelihood y ~ normal(theta, sigma_e); // priors beta ~ normal(0, 100); v ~ normal(0, sigma_v); sigma2_v ~ inv_gamma(0.0001, 0.0001); } generated quantities{ vector[N2] y_pred; for(j in 1:N2) { y_pred[j] = normal_rng(Xs[j] * beta, sigma_v); } } Compilando el modelo en STAN library(cmdstanr) # file.edit(&quot;Data/modelosStan/17FH_normal.stan&quot;) fit_FH_normal &lt;- cmdstan_model(&quot;Recursos/Día2/Sesion2/Data/modelosStan/17FH_normal.stan&quot;) model_FH_normal &lt;- fit_FH_normal$sample( data = sample_data, chains = 4, parallel_chains = 4, iter_warmup = 2000, iter_sampling = 1000, seed = 1234, refresh = 1000 ) ## Running MCMC with 4 parallel chains... ## ## Chain 1 Iteration: 1 / 3000 [ 0%] (Warmup) ## Chain 2 Iteration: 1 / 3000 [ 0%] (Warmup) ## Chain 3 Iteration: 1 / 3000 [ 0%] (Warmup) ## Chain 4 Iteration: 1 / 3000 [ 0%] (Warmup) ## Chain 1 Iteration: 1000 / 3000 [ 33%] (Warmup) ## Chain 3 Iteration: 1000 / 3000 [ 33%] (Warmup) ## Chain 2 Iteration: 1000 / 3000 [ 33%] (Warmup) ## Chain 4 Iteration: 1000 / 3000 [ 33%] (Warmup) ## Chain 1 Iteration: 2000 / 3000 [ 66%] (Warmup) ## Chain 1 Iteration: 2001 / 3000 [ 66%] (Sampling) ## Chain 2 Iteration: 2000 / 3000 [ 66%] (Warmup) ## Chain 2 Iteration: 2001 / 3000 [ 66%] (Sampling) ## Chain 3 Iteration: 2000 / 3000 [ 66%] (Warmup) ## Chain 3 Iteration: 2001 / 3000 [ 66%] (Sampling) ## Chain 4 Iteration: 2000 / 3000 [ 66%] (Warmup) ## Chain 4 Iteration: 2001 / 3000 [ 66%] (Sampling) ## Chain 1 Iteration: 3000 / 3000 [100%] (Sampling) ## Chain 1 finished in 554.6 seconds. ## Chain 2 Iteration: 3000 / 3000 [100%] (Sampling) ## Chain 2 finished in 556.1 seconds. ## Chain 3 Iteration: 3000 / 3000 [100%] (Sampling) ## Chain 3 finished in 555.9 seconds. ## Chain 4 Iteration: 3000 / 3000 [100%] (Sampling) ## Chain 4 finished in 556.4 seconds. ## ## All 4 chains finished successfully. ## Mean chain execution time: 555.8 seconds. ## Total execution time: 558.5 seconds. 12.0.4 Resultados del modelo para los dominios observados. library(bayesplot) library(patchwork) y_pred_B &lt;- model_FH_normal$draws(variables = &quot;theta&quot;, format = &quot;matrix&quot;) rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, ] ppc_dens_overlay(y = as.numeric(data_dir$pobreza), y_pred2) Análisis gráfico de la convergencia de las cadenas. (mcmc_dens_chains(model_FH_normal$draws(&quot;sigma2_v&quot;)) + mcmc_areas(model_FH_normal$draws(&quot;sigma2_v&quot;)))/ mcmc_trace(model_FH_normal$draws(&quot;sigma2_v&quot;)) comparando los resultados obtenidos en STAN theta &lt;- model_FH_normal$summary(variables = &quot;theta&quot;) thetaSyn &lt;- model_FH_normal$summary(variables = &quot;thetaSyn&quot;) theta_FH &lt;- model_FH_normal$summary(variables = &quot;thetaFH&quot;) data_dir %&lt;&gt;% mutate( thetadir = pobreza, theta_pred = theta$mean, thetaSyn = thetaSyn$mean, thetaFH = theta_FH$mean, theta_pred_EE = theta$sd, Cv_theta_pred = theta_pred_EE/theta_pred ) # Estimación predicción del modelo vs ecuación ponderada de FH p11 &lt;- ggplot(data_dir, aes(x = theta_pred, y = thetaFH)) + geom_point() + geom_abline(slope = 1,intercept = 0, colour = &quot;red&quot;) + theme_bw(10) # Estimación con la ecuación ponderada de FH Vs estimación sintética p12 &lt;- ggplot(data_dir, aes(x = thetaSyn, y = thetaFH)) + geom_point() + geom_abline(slope = 1,intercept = 0, colour = &quot;red&quot;) + theme_bw(10) # Estimación con la ecuación ponderada de FH Vs estimación directa p21 &lt;- ggplot(data_dir, aes(x = thetadir, y = thetaFH)) + geom_point() + geom_abline(slope = 1,intercept = 0, colour = &quot;red&quot;) + theme_bw(10) # Estimación directa Vs estimación sintética p22 &lt;- ggplot(data_dir, aes(x = thetadir, y = thetaSyn)) + geom_point() + geom_abline(slope = 1,intercept = 0, colour = &quot;red&quot;) + theme_bw(10) (p11+p12)/(p21+p22) Estimación del FH de la pobreza en los dominios NO observados. theta_syn_pred &lt;- model_FH_normal$summary(variables = &quot;y_pred&quot;) data_syn &lt;- data_syn %&gt;% mutate( theta_pred = theta_syn_pred$mean, thetaSyn = theta_pred, thetaFH = theta_pred, theta_pred_EE = theta_syn_pred$sd, Cv_theta_pred = theta_pred_EE/theta_pred) tba(data_syn %&gt;% slice(1:10) %&gt;% select(dam2:hat_var,theta_pred:Cv_theta_pred)) dam2 nd pobreza vardir hat_var theta_pred thetaSyn thetaFH theta_pred_EE Cv_theta_pred 05004 NA NA NA NA 0.3531 0.3531 0.3531 0.1049 0.2972 05021 NA NA NA NA 0.4315 0.4315 0.4315 0.1038 0.2406 05030 NA NA NA NA 0.2889 0.2889 0.2889 0.1036 0.3585 05036 NA NA NA NA 0.3798 0.3798 0.3798 0.1046 0.2754 05038 NA NA NA NA 0.5240 0.5240 0.5240 0.1037 0.1980 05040 NA NA NA NA 0.5458 0.5458 0.5458 0.1054 0.1931 05042 NA NA NA NA 0.3851 0.3851 0.3851 0.1041 0.2703 05044 NA NA NA NA 0.5314 0.5314 0.5314 0.1026 0.1931 05051 NA NA NA NA 0.5089 0.5089 0.5089 0.1038 0.2040 05055 NA NA NA NA 0.4955 0.4955 0.4955 0.1035 0.2089 consolidando las bases de estimaciones para dominios observados y NO observados. estimacionesPre &lt;- bind_rows(data_dir, data_syn) %&gt;% select(dam, dam2, theta_pred) "],["proceso-de-benchmark.html", "12.1 Proceso de Benchmark", " 12.1 Proceso de Benchmark Del censo extraer el total de personas por DAM2 total_pp &lt;- readRDS(file = &quot;Recursos/Día2/Sesion2/Data/total_personas_dam2.rds&quot;) N_dam_pp &lt;- total_pp %&gt;% ungroup() %&gt;% mutate(dam_pp = sum(total_pp) ) tba(N_dam_pp %&gt;% slice(1:20)) dam dam2 total_pp dam_pp 05 05001 2372330 44164417 05 05002 17599 44164417 05 05004 2159 44164417 05 05021 3839 44164417 05 05030 26821 44164417 05 05031 20265 44164417 05 05034 38144 44164417 05 05036 5027 44164417 05 05038 10500 44164417 05 05040 14502 44164417 05 05042 23216 44164417 05 05044 6388 44164417 05 05045 113469 44164417 05 05051 26289 44164417 05 05055 6752 44164417 05 05059 3819 44164417 05 05079 44757 44164417 05 05086 5349 44164417 05 05088 481901 44164417 05 05091 8589 44164417 Obtener las estimaciones directa por DAM o el nivel de agregación en el cual la encuesta es representativa. encuesta &lt;- readRDS(&quot;Recursos/Día2/Sesion2/Data/encuestaCOL18N1.rds&quot;)%&gt;% transmute( dam = dam_ee, dam2, wkx = `_fep`, upm = segmento, estrato = paste0(dam, haven::as_factor(area_ee,levels = &quot;values&quot;)), pobreza = ifelse(ingcorte &lt; lp, 1 , 0)) #--- Estimación directa por dam ---# library(survey) library(srvyr) options(survey.lonely.psu = &quot;adjust&quot;) diseno &lt;- as_survey_design( ids = upm, weights = wkx, strata = estrato, nest = TRUE, .data = encuesta ) directoDam &lt;- diseno %&gt;% group_by(Agregado = &quot;Nacional&quot;) %&gt;% summarise( theta_dir = survey_mean(pobreza, vartype = c(&quot;ci&quot;)) ) tba(directoDam) Agregado theta_dir theta_dir_low theta_dir_upp Nacional 0.2986 0.2935 0.3038 Realizar el consolidando información obtenida en 1 y 2. temp &lt;- estimacionesPre %&gt;% inner_join(N_dam_pp ) %&gt;% mutate(theta_dir = directoDam$theta_dir ) tba(temp %&gt;% slice(1:10)) dam dam2 theta_pred total_pp dam_pp theta_dir 05 05001 0.1598 2372330 44164417 0.2986 05 05002 0.4152 17599 44164417 0.2986 05 05031 0.4099 20265 44164417 0.2986 05 05034 0.4436 38144 44164417 0.2986 05 05045 0.3106 113469 44164417 0.2986 05 05079 0.3456 44757 44164417 0.2986 05 05088 0.1329 481901 44164417 0.2986 05 05093 0.3904 15097 44164417 0.2986 05 05120 0.6743 26460 44164417 0.2986 05 05129 0.1184 76260 44164417 0.2986 Con la información organizada realizar el calculo de los pesos para el Benchmark R_dam2 &lt;- temp %&gt;% summarise( R_dam_RB = unique(theta_dir) / sum((total_pp / dam_pp) * theta_pred), R_dam_DB = unique(theta_dir) - sum((total_pp / dam_pp) * theta_pred) ) tba(R_dam2) R_dam_RB R_dam_DB 1.0148 0.0044 calculando los pesos para cada dominio. pesos &lt;- temp %&gt;% mutate(W_i = total_pp / dam_pp) %&gt;% select(dam2, W_i) tba(pesos %&gt;% slice(1:10)) dam2 W_i 05001 0.0537 05002 0.0004 05031 0.0005 05034 0.0009 05045 0.0026 05079 0.0010 05088 0.0109 05093 0.0003 05120 0.0006 05129 0.0017 Realizar la estimación FH Benchmark estimacionesBench &lt;- estimacionesPre %&gt;% mutate(R_dam_RB = R_dam2$R_dam_RB) %&gt;% mutate(theta_pred_RBench = R_dam_RB * theta_pred) %&gt;% left_join(pesos) %&gt;% select(dam, dam2, W_i, theta_pred, theta_pred_RBench) tba(estimacionesBench %&gt;% slice(1:10)) dam dam2 W_i theta_pred theta_pred_RBench 05 05001 0.0537 0.1598 0.1622 05 05002 0.0004 0.4152 0.4213 05 05031 0.0005 0.4099 0.4160 05 05034 0.0009 0.4436 0.4502 05 05045 0.0026 0.3106 0.3152 05 05079 0.0010 0.3456 0.3507 05 05088 0.0109 0.1329 0.1348 05 05093 0.0003 0.3904 0.3962 05 05120 0.0006 0.6743 0.6843 05 05129 0.0017 0.1184 0.1201 Validación: Estimación FH con Benchmark estimacionesBench %&gt;% summarise(theta_reg_RB = sum(W_i * theta_pred_RBench)) %&gt;% mutate(theta_dir = directoDam$theta_dir) theta_reg_RB theta_dir 0.2986344 0.2986344 "],["validación-gráfica-de-los-resultados..html", "12.2 Validación gráfica de los resultados.", " 12.2 Validación gráfica de los resultados. temp &lt;- estimacionesBench %&gt;% left_join( bind_rows( data_dir %&gt;% select(dam2, thetaSyn, thetaFH), data_syn %&gt;% select(dam2, thetaSyn, thetaFH))) %&gt;% summarise(thetaSyn = sum(W_i * thetaSyn), thetaFH = sum(W_i * theta_pred), theta_RBench = sum(W_i * theta_pred_RBench) ) %&gt;% mutate(theta_dir = directoDam$theta_dir, theta_dir_low =directoDam$theta_dir_low, theta_dir_upp = directoDam$theta_dir_upp) temp %&lt;&gt;% gather(key = &quot;Metodo&quot;,value = &quot;Estimacion&quot;, -theta_dir_low,-theta_dir_upp) tba(temp) theta_dir_low theta_dir_upp Metodo Estimacion 0.2935 0.3038 thetaSyn 0.2964 0.2935 0.3038 thetaFH 0.2943 0.2935 0.3038 theta_RBench 0.2986 0.2935 0.3038 theta_dir 0.2986 plot(estimacionesBench$theta_pred,estimacionesBench$theta_pred_RBench) abline(a = 0, b= 1, col = &quot;red&quot;) "],["mapa-de-pobreza.html", "Capítulo 13 Mapa de pobreza", " Capítulo 13 Mapa de pobreza library(sp) library(sf) library(tmap) estimacionesBench %&lt;&gt;% left_join( bind_rows( data_dir %&gt;% select(dam2, theta_pred_EE , Cv_theta_pred), data_syn %&gt;% select(dam2, theta_pred_EE , Cv_theta_pred))) ## Leer Shapefile del país ShapeSAE &lt;- read_sf(&quot;Recursos/Día2/Sesion2/Shape/COL_dam2.shp&quot;) mapa &lt;- tm_shape(ShapeSAE %&gt;% left_join(estimacionesBench, by = &quot;dam2&quot;)) brks_lp &lt;- c(0,0.1,0.15, 0.2, 0.3, 0.4, 0.6, 1) tmap_options(check.and.fix = TRUE) Mapa_lp &lt;- mapa + tm_polygons( c(&quot;theta_pred_RBench&quot;), breaks = brks_lp, title = &quot;Mapa de pobreza&quot;, palette = &quot;YlOrRd&quot;, colorNA = &quot;white&quot; ) + tm_layout(asp = 1.5) Mapa_lp "],["fay-herriot-en-r-y-stan-transformación-arcoseno.html", "Capítulo 14 Fay Herriot en R y STAN transformación arcoseno", " Capítulo 14 Fay Herriot en R y STAN transformación arcoseno En su concepción más básica, el modelo de Fay-Herriot es una combinación lineal de covariables. Sin embargo, el resultado de esta combinación pueden tomar valores que se salen del rango aceptable en el que puede estar una proporción; es decir, en general el estimador de Fay-Herriot \\(\\theta \\in R\\), mientras que el estimador directo \\(\\theta \\in (0,1)\\). La transformación arcoseno esta dada por: \\[ \\hat{z}_d = arcsin\\left( \\sqrt{ \\hat{\\theta}_d} \\right) \\] donde \\[ Var\\left( \\hat{z}_d \\right) = \\frac{\\widehat{DEFF}_d}{4\\times n_d} = \\frac{1}{4\\times n_{d,efectivo} } \\] El modelo de Fay-Herriot estaría definido de la siguiente forma: \\[ \\begin{eqnarray*} Z \\mid \\mu,\\sigma_e &amp; \\sim &amp; N(\\mu, \\sigma_e)\\\\ \\mu &amp; = &amp; \\boldsymbol{X\\beta} + V \\\\ \\theta &amp; = &amp; \\left(sin(\\mu)\\right)^2 \\end{eqnarray*} \\] donde \\(V \\sim N(0 , \\sigma_v)\\). Suponga de las distribuciones previas para \\(\\boldsymbol{\\beta}\\) y \\(\\sigma_{v}^{2}\\) son dadas por \\[ \\begin{eqnarray*} \\boldsymbol{\\beta} \\sim N\\left(\\mu_{0},\\tau_{0}\\right)\\\\ \\sigma_{v}^{2} \\sim IG\\left(\\alpha_{1},\\alpha_{2}\\right) \\end{eqnarray*} \\] "],["procesamiento-en-r-1.html", "14.1 Procesamiento en R", " 14.1 Procesamiento en R Lectura de la base de datos que resultó en el paso anterior y selección de las columnas de interés library(tidyverse) library(magrittr) base_FH &lt;- readRDS(&quot;Recursos/Día2/Sesion3/Data/base_FH_2018.rds&quot;) %&gt;% transmute(dam2, ## id dominios pobreza, T_pobreza = asin(sqrt(pobreza)), ## creando zd n_effec = n_eff_FGV, ## n efectivo varhat = 1/(4*n_effec) ## varianza para zd ) Lectura de las covariables, las cuales son obtenidas previamente. Dado la diferencia entre las escalas de las variables es necesario hacer un ajuste a estas. statelevel_predictors_df &lt;- readRDS(&quot;Recursos/Día2/Sesion3/Data/statelevel_predictors_df_dam2.rds&quot;) %&gt;% mutate_at(.vars = c(&quot;luces_nocturnas&quot;, &quot;cubrimiento_cultivo&quot;, &quot;cubrimiento_urbano&quot;, &quot;modificacion_humana&quot;, &quot;accesibilidad_hospitales&quot;, &quot;accesibilidad_hosp_caminado&quot;), function(x) as.numeric(scale(x))) Uniendo las dos bases de datos. base_FH &lt;- full_join(base_FH, statelevel_predictors_df, by = &quot;dam2&quot; ) tba(base_FH[,1:8] %&gt;% head(10)) dam2 pobreza T_pobreza n_effec varhat dam area1 sexo2 05001 0.1597 0.4111 1150.9156 0.0002 05 0.9832 0.5299 05002 0.4049 0.6897 11.4884 0.0218 05 0.3953 0.4807 05031 0.3817 0.6660 5.6901 0.0439 05 0.5766 0.4978 05034 0.4731 0.7585 7.4016 0.0338 05 0.5029 0.4815 05045 0.2876 0.5661 6.9301 0.0361 05 0.8091 0.5078 05079 0.4001 0.6848 23.8486 0.0105 05 0.4821 0.5038 05088 0.1314 0.3709 48.7553 0.0051 05 0.9569 0.5186 05093 0.3273 0.6091 6.0577 0.0413 05 0.2776 0.4862 05120 0.7049 0.9965 11.8232 0.0211 05 0.1989 0.4787 05129 0.1140 0.3444 47.8247 0.0052 05 0.8065 0.5202 Seleccionando las covariables para el modelo. names_cov &lt;- c( &quot;sexo2&quot; , &quot;anoest2&quot; , &quot;anoest3&quot;, &quot;anoest4&quot;, &quot;edad2&quot; , &quot;edad3&quot; , &quot;edad4&quot; , &quot;edad5&quot; , &quot;etnia1&quot;, &quot;etnia2&quot; , &quot;tasa_desocupacion&quot; , &quot;luces_nocturnas&quot; , &quot;cubrimiento_cultivo&quot; , &quot;alfabeta&quot; ) "],["preparando-los-insumos-para-stan-1.html", "Capítulo 15 Preparando los insumos para STAN", " Capítulo 15 Preparando los insumos para STAN Dividir la base de datos en dominios observados y no observados 15.0.1 Dominios observados. data_dir &lt;- base_FH %&gt;% filter(!is.na(T_pobreza)) 15.0.2 Dominios NO observados. data_syn &lt;- base_FH %&gt;% anti_join(data_dir %&gt;% select(dam2)) tba(data_syn[,1:8] %&gt;% slice(1:10)) dam2 pobreza T_pobreza n_effec varhat dam area1 sexo2 05004 NA NA NA NA 05 0.3279 0.4576 05021 NA NA NA NA 05 0.5770 0.5020 05030 NA NA NA NA 05 0.4859 0.5063 05036 NA NA NA NA 05 0.3931 0.4951 05038 NA NA NA NA 05 0.2256 0.4927 05040 NA NA NA NA 05 0.4858 0.4826 05042 NA NA NA NA 05 0.6688 0.5031 05044 NA NA NA NA 05 0.1847 0.4828 05051 NA NA NA NA 05 0.3660 0.4970 05055 NA NA NA NA 05 0.4431 0.4825 15.0.3 Matrix de covariables (Efectos fijos) ## Dominios observados Xdat &lt;- cbind(inter = 1,data_dir[,names_cov]) ## Dominios no observados Xs &lt;- cbind(inter = 1,data_syn[,names_cov]) Creando lista de parámetros para STAN sample_data &lt;- list( N1 = nrow(Xdat), # Observados. N2 = nrow(Xs), # NO Observados. p = ncol(Xdat), # Número de regresores. X = as.matrix(Xdat), # Covariables Observados. Xs = as.matrix(Xs), # Covariables NO Observados y = as.numeric(data_dir$T_pobreza), sigma_e = sqrt(data_dir$varhat) ) Compilando el modelo en STAN library(cmdstanr) # file.edit(&quot;Data/modelosStan/15FH_arcsin_normal.stan&quot;) fit_FH_arcoseno &lt;- cmdstan_model(&quot;Recursos/Día2/Sesion3/Data/modelosStan/15FH_arcsin_normal.stan&quot;) model_FH_arcoseno &lt;- fit_FH_arcoseno$sample( data = sample_data, chains = 4, parallel_chains = 4, iter_warmup = 2000, iter_sampling = 1000, seed = 1234, refresh = 1000 ) ## Running MCMC with 4 parallel chains... ## ## Chain 1 Iteration: 1 / 3000 [ 0%] (Warmup) ## Chain 2 Iteration: 1 / 3000 [ 0%] (Warmup) ## Chain 3 Iteration: 1 / 3000 [ 0%] (Warmup) ## Chain 4 Iteration: 1 / 3000 [ 0%] (Warmup) ## Chain 2 Iteration: 1000 / 3000 [ 33%] (Warmup) ## Chain 3 Iteration: 1000 / 3000 [ 33%] (Warmup) ## Chain 1 Iteration: 1000 / 3000 [ 33%] (Warmup) ## Chain 4 Iteration: 1000 / 3000 [ 33%] (Warmup) ## Chain 2 Iteration: 2000 / 3000 [ 66%] (Warmup) ## Chain 2 Iteration: 2001 / 3000 [ 66%] (Sampling) ## Chain 3 Iteration: 2000 / 3000 [ 66%] (Warmup) ## Chain 3 Iteration: 2001 / 3000 [ 66%] (Sampling) ## Chain 1 Iteration: 2000 / 3000 [ 66%] (Warmup) ## Chain 1 Iteration: 2001 / 3000 [ 66%] (Sampling) ## Chain 4 Iteration: 2000 / 3000 [ 66%] (Warmup) ## Chain 4 Iteration: 2001 / 3000 [ 66%] (Sampling) ## Chain 2 Iteration: 3000 / 3000 [100%] (Sampling) ## Chain 2 finished in 837.9 seconds. ## Chain 3 Iteration: 3000 / 3000 [100%] (Sampling) ## Chain 1 Iteration: 3000 / 3000 [100%] (Sampling) ## Chain 3 finished in 839.4 seconds. ## Chain 1 finished in 839.6 seconds. ## Chain 4 Iteration: 3000 / 3000 [100%] (Sampling) ## Chain 4 finished in 841.1 seconds. ## ## All 4 chains finished successfully. ## Mean chain execution time: 839.5 seconds. ## Total execution time: 842.5 seconds. 15.0.4 Resultados del modelo para los dominios observados. library(bayesplot) library(patchwork) y_pred_B &lt;- model_FH_arcoseno$draws(variables = &quot;theta&quot;, format = &quot;matrix&quot;) rowsrandom &lt;- sample(nrow(y_pred_B), 100) y_pred2 &lt;- y_pred_B[rowsrandom, ] ppc_dens_overlay(y = as.numeric(data_dir$pobreza), y_pred2) Análisis gráfico de la convergencia de las cadenas. (mcmc_dens_chains(model_FH_arcoseno$draws(&quot;sigma_v&quot;)) + mcmc_areas(model_FH_arcoseno$draws(&quot;sigma_v&quot;)))/ mcmc_trace(model_FH_arcoseno$draws(&quot;sigma_v&quot;)) Estimación del FH de la pobreza en los dominios observados. theta_FH &lt;- model_FH_arcoseno$summary(variables = &quot;theta&quot;) data_dir %&lt;&gt;% mutate(pred_arcoseno = theta_FH$mean, pred_arcoseno_EE = theta_FH$sd, Cv_pred = pred_arcoseno_EE/pred_arcoseno) Estimación del FH de la pobreza en los dominios NO observados. theta_FH_pred &lt;- model_FH_arcoseno$summary(variables = &quot;theta_pred&quot;) data_syn &lt;- data_syn %&gt;% mutate(pred_arcoseno = theta_FH_pred$mean, pred_arcoseno_EE = theta_FH_pred$sd, Cv_pred = pred_arcoseno_EE/pred_arcoseno) "],["mapa-de-pobreza-1.html", "Capítulo 16 Mapa de pobreza", " Capítulo 16 Mapa de pobreza library(sp) library(sf) library(tmap) data_map &lt;- rbind(data_dir, data_syn) %&gt;% select(dam2, pobreza, pred_arcoseno, pred_arcoseno_EE,Cv_pred ) ## Leer Shapefile del país ShapeSAE &lt;- read_sf(&quot;Recursos/Día2/Sesion3/Shape/COL_dam2.shp&quot;) mapa &lt;- tm_shape(ShapeSAE %&gt;% left_join(data_map, by = &quot;dam2&quot;)) brks_lp &lt;- c(0,0.15, 0.3, 0.45, 0.6, 1) tmap_options(check.and.fix = TRUE) Mapa_lp &lt;- mapa + tm_polygons( c(&quot;pobreza&quot;, &quot;pred_arcoseno&quot;), breaks = brks_lp, title = &quot;Mapa de pobreza&quot;, palette = &quot;YlOrRd&quot;, colorNA = &quot;white&quot; ) + tm_layout(asp = 1.5) Mapa_lp Coeficiente de variación. Mapa_cv &lt;- mapa + tm_polygons( c(&quot;Cv_pred&quot;), title = &quot;Mapa de pobreza(cv)&quot;, palette = &quot;YlOrRd&quot;, colorNA = &quot;white&quot; ) + tm_layout(asp = 2.5) Mapa_cv "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
